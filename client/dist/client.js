/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../backend/node_modules/axios/index.js":
/*!**********************************************!*\
  !*** ../backend/node_modules/axios/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/axios */ \"../backend/node_modules/axios/lib/axios.js\");\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/index.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/adapters/xhr.js":
/*!*********************************************************!*\
  !*** ../backend/node_modules/axios/lib/adapters/xhr.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"../backend/node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"../backend/node_modules/axios/lib/core/settle.js\");\nvar cookies = __webpack_require__(/*! ./../helpers/cookies */ \"../backend/node_modules/axios/lib/helpers/cookies.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"../backend/node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"../backend/node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"../backend/node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"../backend/node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"../backend/node_modules/axios/lib/core/createError.js\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/adapters/xhr.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/axios.js":
/*!**************************************************!*\
  !*** ../backend/node_modules/axios/lib/axios.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"../backend/node_modules/axios/lib/utils.js\");\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"../backend/node_modules/axios/lib/helpers/bind.js\");\nvar Axios = __webpack_require__(/*! ./core/Axios */ \"../backend/node_modules/axios/lib/core/Axios.js\");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ \"../backend/node_modules/axios/lib/core/mergeConfig.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"../backend/node_modules/axios/lib/defaults.js\");\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ \"../backend/node_modules/axios/lib/cancel/Cancel.js\");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ \"../backend/node_modules/axios/lib/cancel/CancelToken.js\");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ \"../backend/node_modules/axios/lib/cancel/isCancel.js\");\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ \"../backend/node_modules/axios/lib/helpers/spread.js\");\n\n// Expose isAxiosError\naxios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ \"../backend/node_modules/axios/lib/helpers/isAxiosError.js\");\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports[\"default\"] = axios;\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/axios.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/cancel/Cancel.js":
/*!**********************************************************!*\
  !*** ../backend/node_modules/axios/lib/cancel/Cancel.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/cancel/Cancel.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/cancel/CancelToken.js":
/*!***************************************************************!*\
  !*** ../backend/node_modules/axios/lib/cancel/CancelToken.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"../backend/node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/cancel/CancelToken.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/cancel/isCancel.js":
/*!************************************************************!*\
  !*** ../backend/node_modules/axios/lib/cancel/isCancel.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/cancel/isCancel.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/core/Axios.js":
/*!*******************************************************!*\
  !*** ../backend/node_modules/axios/lib/core/Axios.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"../backend/node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"../backend/node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"../backend/node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"../backend/node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"../backend/node_modules/axios/lib/core/mergeConfig.js\");\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/core/Axios.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/core/InterceptorManager.js":
/*!********************************************************************!*\
  !*** ../backend/node_modules/axios/lib/core/InterceptorManager.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"../backend/node_modules/axios/lib/utils.js\");\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/core/InterceptorManager.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/core/buildFullPath.js":
/*!***************************************************************!*\
  !*** ../backend/node_modules/axios/lib/core/buildFullPath.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ \"../backend/node_modules/axios/lib/helpers/isAbsoluteURL.js\");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ \"../backend/node_modules/axios/lib/helpers/combineURLs.js\");\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/core/buildFullPath.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/core/createError.js":
/*!*************************************************************!*\
  !*** ../backend/node_modules/axios/lib/core/createError.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"../backend/node_modules/axios/lib/core/enhanceError.js\");\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/core/createError.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/core/dispatchRequest.js":
/*!*****************************************************************!*\
  !*** ../backend/node_modules/axios/lib/core/dispatchRequest.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"../backend/node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"../backend/node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"../backend/node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"../backend/node_modules/axios/lib/defaults.js\");\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/core/dispatchRequest.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/core/enhanceError.js":
/*!**************************************************************!*\
  !*** ../backend/node_modules/axios/lib/core/enhanceError.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/core/enhanceError.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/core/mergeConfig.js":
/*!*************************************************************!*\
  !*** ../backend/node_modules/axios/lib/core/mergeConfig.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"../backend/node_modules/axios/lib/utils.js\");\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',\n    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n  ];\n  var directMergeKeys = ['validateStatus'];\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  utils.forEach(directMergeKeys, function merge(prop) {\n    if (prop in config2) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys)\n    .concat(directMergeKeys);\n\n  var otherKeys = Object\n    .keys(config1)\n    .concat(Object.keys(config2))\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, mergeDeepProperties);\n\n  return config;\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/core/mergeConfig.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/core/settle.js":
/*!********************************************************!*\
  !*** ../backend/node_modules/axios/lib/core/settle.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar createError = __webpack_require__(/*! ./createError */ \"../backend/node_modules/axios/lib/core/createError.js\");\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/core/settle.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/core/transformData.js":
/*!***************************************************************!*\
  !*** ../backend/node_modules/axios/lib/core/transformData.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"../backend/node_modules/axios/lib/utils.js\");\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/core/transformData.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/defaults.js":
/*!*****************************************************!*\
  !*** ../backend/node_modules/axios/lib/defaults.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"../backend/node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ \"../backend/node_modules/axios/lib/helpers/normalizeHeaderName.js\");\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ./adapters/xhr */ \"../backend/node_modules/axios/lib/adapters/xhr.js\");\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ./adapters/http */ \"../backend/node_modules/axios/lib/adapters/xhr.js\");\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/defaults.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/helpers/bind.js":
/*!*********************************************************!*\
  !*** ../backend/node_modules/axios/lib/helpers/bind.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/helpers/bind.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/helpers/buildURL.js":
/*!*************************************************************!*\
  !*** ../backend/node_modules/axios/lib/helpers/buildURL.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"../backend/node_modules/axios/lib/utils.js\");\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/helpers/buildURL.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/helpers/combineURLs.js":
/*!****************************************************************!*\
  !*** ../backend/node_modules/axios/lib/helpers/combineURLs.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/helpers/combineURLs.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/helpers/cookies.js":
/*!************************************************************!*\
  !*** ../backend/node_modules/axios/lib/helpers/cookies.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"../backend/node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/helpers/cookies.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!******************************************************************!*\
  !*** ../backend/node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/helpers/isAbsoluteURL.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/helpers/isAxiosError.js":
/*!*****************************************************************!*\
  !*** ../backend/node_modules/axios/lib/helpers/isAxiosError.js ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/helpers/isAxiosError.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!********************************************************************!*\
  !*** ../backend/node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"../backend/node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/helpers/isURLSameOrigin.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!************************************************************************!*\
  !*** ../backend/node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"../backend/node_modules/axios/lib/utils.js\");\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/helpers/normalizeHeaderName.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/helpers/parseHeaders.js":
/*!*****************************************************************!*\
  !*** ../backend/node_modules/axios/lib/helpers/parseHeaders.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"../backend/node_modules/axios/lib/utils.js\");\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/helpers/parseHeaders.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/helpers/spread.js":
/*!***********************************************************!*\
  !*** ../backend/node_modules/axios/lib/helpers/spread.js ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/helpers/spread.js?");

/***/ }),

/***/ "../backend/node_modules/axios/lib/utils.js":
/*!**************************************************!*\
  !*** ../backend/node_modules/axios/lib/utils.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"../backend/node_modules/axios/lib/helpers/bind.js\");\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/axios/lib/utils.js?");

/***/ }),

/***/ "../backend/node_modules/debug/node_modules/ms/index.js":
/*!**************************************************************!*\
  !*** ../backend/node_modules/debug/node_modules/ms/index.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/debug/node_modules/ms/index.js?");

/***/ }),

/***/ "../backend/node_modules/debug/src/browser.js":
/*!****************************************************!*\
  !*** ../backend/node_modules/debug/src/browser.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"../backend/node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/debug/src/browser.js?");

/***/ }),

/***/ "../backend/node_modules/debug/src/common.js":
/*!***************************************************!*\
  !*** ../backend/node_modules/debug/src/common.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"../backend/node_modules/debug/node_modules/ms/index.js\");\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => enableOverride === null ? createDebug.enabled(namespace) : enableOverride,\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n//# sourceURL=webpack://coding-ars-client/../backend/node_modules/debug/src/common.js?");

/***/ }),

/***/ "../backend/route/helper/callback.js":
/*!*******************************************!*\
  !*** ../backend/route/helper/callback.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const axios = __webpack_require__(/*! axios */ \"../backend/node_modules/axios/index.js\")\nconst debug = __webpack_require__(/*! debug */ \"../backend/node_modules/debug/src/browser.js\")('coding:routes:helper:callback')\n\nmodule.exports = {\n    log: (type, task, data, callback, contentId) => {\n        try {\n            if (callback && callback.startsWith('http')) {\n                if (!callback.endsWith('/')) {\n                    callback += '/';\n                }\n                callback += contentId;\n                callback += '/log/';\n                callback += `${type}(${task},${data})`;\n                axios.get(callback).then(() => {\n                    // ignore\n                }).catch(err => {\n                    debug(`Could not log at callback: ${err.stack ? err.stack : err}: ${callback}`)\n                });\n                debug(`Send log callback ${callback}`)\n            } else {\n                debug(`Log: ${type}(${task},${data})`);\n            }\n        } catch (err) {\n            debug(`Could not log at callback: ${err.stack ? err.stack : err}`)\n        }\n    }\n}\n\n//# sourceURL=webpack://coding-ars-client/../backend/route/helper/callback.js?");

/***/ }),

/***/ "./client/client.js":
/*!**************************!*\
  !*** ./client/client.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controller_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controller/client */ \"./client/controller/client.js\");\n/* harmony import */ var _controller_load__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller/load */ \"./client/controller/load.js\");\n\n\n\nwindow.codingArs = window.codingArs || {};\nwindow.codingArs.prepare = _controller_client__WEBPACK_IMPORTED_MODULE_0__.clientController;\nwindow.codingArs.load = _controller_load__WEBPACK_IMPORTED_MODULE_1__.loadController;\n\n//# sourceURL=webpack://coding-ars-client/./client/client.js?");

/***/ }),

/***/ "./client/controller/client.js":
/*!*************************************!*\
  !*** ./client/controller/client.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clientController: () => (/* binding */ clientController)\n/* harmony export */ });\n/* harmony import */ var _service_codingars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../service/codingars */ \"./client/service/codingars.js\");\n/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task */ \"./client/controller/task.js\");\n/* harmony import */ var _collection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collection */ \"./client/controller/collection.js\");\n/* harmony import */ var _key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./key */ \"./client/controller/key.js\");\n/* harmony import */ var _view_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../view/message */ \"./client/view/message.js\");\n/* harmony import */ var _utils_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/message */ \"./client/utils/message.js\");\n/* harmony import */ var _language__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../language */ \"./client/language.js\");\n\n\n\n\n\n\n\n\nfunction clientController(target, url, key, options, task = undefined, token = undefined, session = undefined, language = undefined) {\n    console.log(\"start new coding ars client\")\n    return new Promise((resolve, reject) => {\n        options = options || {};\n        options.language = options.language || \"de\"; //TODO change default lang?\n        options.context = options.context || \"\";\n        const translate = (0,_language__WEBPACK_IMPORTED_MODULE_6__.translator)(options.language);\n\n        const controller = {};\n        let msgView = (0,_view_message__WEBPACK_IMPORTED_MODULE_4__.messageView)();\n        target.appendChild(msgView);\n\n        // Add listeners for messages (error, success and message)\n        target.addEventListener('coding-ars-error', (ev) => msgView.controller.show(ev.msg, 'error'), true);\n        target.addEventListener('coding-ars-success', (ev) => msgView.controller.show(ev.msg, 'success'), true);\n        target.addEventListener('coding-ars-message', (ev) => msgView.controller.show(ev.msg), true);\n\n        // Main client start up, handle switch between different views (task editor and task selection)\n        const startMain = (codingArs) => {\n            return new Promise((resolve, reject) => {\n                let current;\n                Object.defineProperty(controller, 'current', {\n                    get: function() { return current }\n                });\n            \n                // Start task view, clean up current content\n                target.addEventListener('coding-ars-start-task', (ev) => {\n                    if(!ev.task) {\n                        console.log(\"Missing task name in start task event\");\n                        target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_5__.errorMessage)(translate('COULD_NOT_START_TASK')));\n                        return;\n                    }\n                    if(current) {\n                        current.dispose();\n                        current = undefined;\n                    }\n                    if(ev.singleTaskCollection) {\n                        target.classList.add('single-task-mode');\n                    }\n                    console.log(\"start task controller for task \" + ev.task);\n                    (0,_task__WEBPACK_IMPORTED_MODULE_1__.taskController)(target, codingArs, ev.task, options).then((ref) => {\n                        current = ref;\n                        const event = new Event('coding-ars-started-task');\n                        event.task = ev.task;\n                        target.dispatchEvent(event);\n                    });\n                }, true);\n\n                // Start task selection view for this collection, clean up current content\n                target.addEventListener('coding-ars-show-collection', (ev) => {\n                    if(current) {\n                        current.dispose();\n                        current = undefined;\n                    }\n                    console.log(\"start collection controller to select tasks\");\n                    (0,_collection__WEBPACK_IMPORTED_MODULE_2__.collectionController)(target, codingArs, options).then((ref) => {\n                        current = ref;\n                        target.dispatchEvent(new Event('coding-ars-started-collection'));\n                    });\n                }, true);\n\n                // If there is a provided task, jump directly into this task\n                if(task) {\n                    console.log(\"use in single task mode for task \" + task);\n                    let ev = new Event('coding-ars-start-task');\n                    ev.task = task;\n                    ev.singleTaskCollection = true;\n                    target.dispatchEvent(ev);\n                // Otherwise, show task selection of this collection\n                } else {\n                    console.log(\"start with task selection\");\n                    target.dispatchEvent(new Event('coding-ars-show-collection'));\n                }\n\n                resolve(controller);\n            })\n        }\n\n        // Handle new service creation, in case of provided token push token to backend,\n        // don't wait for response\n        const handleService = codingArs => {\n            return new Promise((resolve) => {\n                console.log(`received response with session id and reference ${codingArs.collectionRef}`);\n    \n                const doStartMain = () => {\n                    try {\n                        startMain(codingArs).then(resolve);\n                    } catch(err) {\n                        console.error(String(err));\n                    }\n                };\n\n                if(token) {\n                    Promise.resolve(token).then(res => {\n                        console.log(`identify with token`);\n                        codingArs.identify(res).then(result => {\n                            console.log(`identified with token`);\n                            doStartMain();\n                        }).catch(err => {\n                            console.error(String(err));\n                            doStartMain();\n                        })\n                    }).catch(err => {\n                        console.error(String(err));\n                        doStartMain();\n                    })\n                } else {\n                    console.log(`no token, continue with starting app`);\n                    doStartMain();\n                }\n            })\n        }\n\n        // Create coding ars service with new key\n        const handleKey = () => {\n            console.log(\"send join request with \" + key);\n            return _service_codingars__WEBPACK_IMPORTED_MODULE_0__.CodingArsService.join(url, key, options.context).then(handleService);\n        }\n\n        // Create coding ars service with existing session identifier\n        const handleSession = () => {\n            console.log(\"rejoin request with \" + session);\n            return _service_codingars__WEBPACK_IMPORTED_MODULE_0__.CodingArsService.reJoin(url, session, options.context).then(handleService);\n        }\n\n        // Three possible startup processes:\n        // 1. Already logged in (identified by session), recreate CodingArsService instance without join-Request\n        if(session) {\n            console.log(\"use provided session identifier \" + session);\n            handleSession().then(resolve).catch(reject);\n        // 2. Provided join-Key, use this and start client\n        } else if(key) {\n            console.log(\"use provided key \" + key);\n            handleKey().then(resolve).catch(reject);\n        // 3. Nothing, show key form and wait until provided\n        } else {\n            console.log(\"ask for joining key by form\");\n            let current;\n            target.addEventListener('coding-ars-key', (ev) => {\n                key = ev.key;\n                handleKey().then(() => current.dispose()).catch(err => {});\n            }, true);\n\n            (0,_key__WEBPACK_IMPORTED_MODULE_3__.keyController)(target, options).then((ref) => current = ref)\n            resolve(controller);\n        }\n    })\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/controller/client.js?");

/***/ }),

/***/ "./client/controller/collection.js":
/*!*****************************************!*\
  !*** ./client/controller/collection.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectionController: () => (/* binding */ collectionController)\n/* harmony export */ });\n/* harmony import */ var _view_collection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/collection */ \"./client/view/collection.js\");\n/* harmony import */ var _utils_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/message */ \"./client/utils/message.js\");\n/* harmony import */ var _language__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../language */ \"./client/language.js\");\n\n\n\n\nfunction collectionController(target, codingArs, options) {\n    const translate = (0,_language__WEBPACK_IMPORTED_MODULE_2__.translator)(options.language);\n    return new Promise((resolve, reject) => {\n        let cv = (0,_view_collection__WEBPACK_IMPORTED_MODULE_0__.collectionView)(options);\n        target.appendChild(cv);\n    \n        codingArs.collection().then(data => {\n            resolve({\n                dispose: () => {\n                    console.log(\"dispose collection controller\");\n                    target.removeChild(cv);\n                }\n            })\n            if(data.tasks && data.tasks.length == 1) {\n                console.log(\"only one task found, disable selection and switch to task\");\n                let ev = new Event('coding-ars-start-task');\n                ev.task = data.tasks[0].name;\n                ev.singleTaskCollection = true;\n                target.dispatchEvent(ev);\n            } else {\n                cv.controller.show(data);\n            }\n        }).catch(err => {\n            console.log(String(err));\n            console.log(err);\n            target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('COULD_NOT_FIND_TASK_COLLECTION')));\n        });\n    });\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/controller/collection.js?");

/***/ }),

/***/ "./client/controller/key.js":
/*!**********************************!*\
  !*** ./client/controller/key.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyController: () => (/* binding */ keyController)\n/* harmony export */ });\n/* harmony import */ var _view_key__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/key */ \"./client/view/key.js\");\n\n\nfunction keyController(target, options) {\n    return new Promise((resolve, reject) => {\n        let kv = (0,_view_key__WEBPACK_IMPORTED_MODULE_0__.keyView)(options);\n        target.appendChild(kv);\n        resolve({\n            dispose: () => {\n                console.log(\"dispose key form controller\");\n                target.removeChild(kv);\n            }\n        })\n    });\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/controller/key.js?");

/***/ }),

/***/ "./client/controller/load.js":
/*!***********************************!*\
  !*** ./client/controller/load.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadController: () => (/* binding */ loadController)\n/* harmony export */ });\n/* harmony import */ var _service_codingars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../service/codingars */ \"./client/service/codingars.js\");\n\n\nfunction loadController(url, key, task, token = undefined) {\n    console.log(\"Start loading with joining task collection\");\n\n    _service_codingars__WEBPACK_IMPORTED_MODULE_0__.CodingArsService.join(url, key).then(codingArs => {\n        const loader = () => {\n            console.log(\"Joined collection, create download link\");\n            var link = document.createElement(\"a\");\n            link.href = codingArs.loadUrl(task);\n            document.body.appendChild(link);\n            link.click();\n            link.remove();\n        }\n        \n        if(token) {\n            Promise.resolve(token).then(res => {\n                console.log(`Identify with token`);\n                codingArs.identify(res).then(result => {\n                    console.log(`identified with token`);\n                    loader();\n                }).catch(err => {\n                    console.error(String(err));\n                    loader();\n                })\n            }).catch(err => {\n                console.error(String(err));\n                loader();\n            })\n        } else {\n            console.log(`No token, continue with starting app`);\n            loader();\n        }\n    });\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/controller/load.js?");

/***/ }),

/***/ "./client/controller/task.js":
/*!***********************************!*\
  !*** ./client/controller/task.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   taskController: () => (/* binding */ taskController)\n/* harmony export */ });\n/* harmony import */ var _view_task__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/task */ \"./client/view/task.js\");\n/* harmony import */ var _utils_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/message */ \"./client/utils/message.js\");\n/* harmony import */ var _language__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../language */ \"./client/language.js\");\n\n\n\n\nfunction taskController(target, codingArs, task, options) {\n    const translate = (0,_language__WEBPACK_IMPORTED_MODULE_2__.translator)(options.language);\n    return new Promise((resolve, reject) => {\n        let tv = (0,_view_task__WEBPACK_IMPORTED_MODULE_0__.taskView)(options);\n        let currentTask = undefined;\n        target.appendChild(tv);\n\n        const save = () => tv.controller.value()\n            .then(files => codingArs.save(task, files));\n        const load = () => {\n            save().then(() => {\n                var link = document.createElement(\"a\");\n                link.href = codingArs.loadUrl(task);\n                document.body.appendChild(link);\n                link.click();\n                link.remove();\n            })\n        }\n    \n        console.log(`load task details for \"${task}\" from backend`);\n        codingArs.task(task).then(data => {\n            console.log(`received task details for \"${task}\" from backend`);\n            currentTask = data;\n            tv.controller.show(data);\n            tv.controller.initTerminalService(codingArs.url);\n            resolve({\n                dispose: () => {\n                    console.log(\"dispose task controller\");\n                    if (tv.controller.terminalService) {\n                        tv.controller.terminalService.dispose();\n                        tv.controller.terminalService = null;\n                    }\n                    target.removeChild(tv);\n                },\n                activateEditor: () => tv.controller.activateEditor(),\n                disposeEditor: () => tv.controller.disposeEditor(),\n                save,\n                load,\n                addToolbarButton: tv.controller.addToolbarButton\n            });\n\n            // Restore code review if available\n            if(currentTask.useCodeReview && data.testsOk) {\n                console.log(`restore code review for task \"${task}\"`);\n                codingArs.codeReviewLoadLatest(data.name).then((review) => {\n                    tv.controller.showLatestCodeReview(review.messages || [], review.score || 0, review.minScore || 0, review.maxScore || 0);\n                }).catch(err => {\n                    console.error(String(err));\n                    target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('ERROR_WHILE_LOADING_CODE_REVIEW')));\n                });\n            }\n        }).catch(err => {\n            console.error(String(err));\n            target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate(COULD_NOT_LOAD_TASK)));\n        });\n    \n        let handleRunOrTest = (result, tested, files) => {\n            console.log(`received result for execution of task \"${task}\"`);\n            let output = {message: result.runOutput || translate(\"NO_OUTPUT\")};\n            let good = true;\n            if(result.compileResults && result.compileResults.length) {\n                output.message = \"\";\n                result.compileResults.forEach(el => output.message += `${output.message?'\\n\\n':''}Error in ${el.path}:\\n${el.errors}`)\n                good = false;\n            } else if(result.testOutput) {\n                output = result.testOutput;\n                good = result.testOutput.testsOk;\n            } else if (result.success != undefined) {\n                good = result.success;\n            }\n            tv.controller.handleResult(output, good, tested);\n\n            // broadcast score from code review\n            const runOrTestEvent = new Event('coding-ars-run-or-test-result');\n            runOrTestEvent.good = good;\n            runOrTestEvent.tested = tested;\n            runOrTestEvent.task = task;\n            target.dispatchEvent(runOrTestEvent);\n\n            // Start review if run or test was successful\n            if(currentTask && currentTask.useCodeReview) {\n                console.log(`trigger code-review for task \"${task}\"`, files);\n                let ref = \"\";\n                const startReviewOrHelp = (review, message = \"\") => {\n                    let handleEventData = (eventData) => {\n                        // new text data\n                        if(eventData.token) {\n                            writer.append(eventData.token);\n                        }\n                        // we get a ref id for further communication\n                        if(eventData.ref) {\n                            ref = eventData.ref;\n                        }\n                        if(eventData.score) {\n                            // broadcast score from code review\n                            const event = new Event('coding-ars-code-review-score');\n                            event.score = eventData.score;\n                            event.minScore = eventData.minScore;\n                            event.task = eventData.task;\n                            target.dispatchEvent(event);\n                            writer.score(eventData.score, eventData.minScore);\n                        }\n                        if(eventData.error) {\n                            console.error(\"Error while doing code review: \" + eventData.message);\n                            writer.rollbackWithError(eventData.message);\n                        }\n                        // we get a DONE signal\n                        if(eventData.done) {\n                            // if we have a ref, we provide a function for further communication\n                            // otherwise we just finish the code review\n                            writer.finishCodeReview(ref ? (request) => {\n                                codingArs.codeReviewContinue(options.language, ref, request, handleEventData).then(() => {}).catch(err => {\n                                    console.error(String(err));\n                                    target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('ERROR_WHILE_CREATING_CODE_REVIEW')));\n                                });\n                            } : undefined);\n                        }\n                    };\n                    if(review) {\n                        codingArs.codeReview(options.language, task, files, handleEventData).then(() => {}).catch(err => {\n                            console.error(String(err));\n                            target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('ERROR_WHILE_CREATING_CODE_REVIEW')));\n                        });\n                    } else {\n                        codingArs.codeHelp(options.language, task, files, message, handleEventData).then(() => {}).catch(err => {\n                            console.error(String(err));\n                            target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('ERROR_WHILE_CREATING_CODE_REVIEW')));\n                        });\n                    }\n                };\n                const writer = tv.controller.startCodeReview(\n                    good, \n                    () => startReviewOrHelp(true), \n                    (msg) => startReviewOrHelp(false, msg),\n                    () => {\n                        codingArs.noCodeReview(options.language, task, files).then(() => {}).catch(err => {\n                            console.error(String(err));\n                            target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('ERROR_WHILE_CREATING_NO_CODE_REVIEW')));\n                        });\n                    },\n                    (msg) => {\n                        codingArs.badCodeReview(options.language, ref, msg).then(() => {}).catch(err => {\n                            console.error(String(err));\n                            target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('ERROR_WHILE_CREATING_NO_CODE_REVIEW')));\n                        });\n                    }\n                );\n            }\n        };\n        \n        // Handle user event for loading zip file\n        tv.addEventListener('coding-ars-download', (ev) => load());\n    \n        // Handle user event for starting normal run\n        tv.addEventListener('coding-ars-run', (ev) => {\n            console.log(`trigger run for task \"${task}\"`, ev.files);\n            tv.controller.terminalService.clearTerminal();\n            codingArs.run(task, ev.files).then(res => handleRunOrTest(res, false, ev.files)).catch(err => {\n                console.error(String(err));\n                target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('ERROR_WHILE_RUNNING_CODE')));\n            });\n        });\n\n        // Handle user event for starting test\n        tv.addEventListener('coding-ars-test', (ev) => {\n            console.log(`trigger test for task \"${task}\"`, ev.files);\n            tv.controller.terminalService.clearTerminal();\n            codingArs.test(task, ev.files).then(res => handleRunOrTest(res, true, ev.files)).catch(err => {\n                console.error(String(err));\n                target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('ERROR_WHILE_TESTING_CODE')));\n            });\n        });\n        \n        // Handle user event for loading sample solutions\n        tv.addEventListener('coding-ars-load-sample-solution', () => {\n            codingArs.sampleSolution(task).then(data => {\n                tv.controller.showSampleSolution(data);\n            }).catch(err => {\n                console.error(String(err));\n                target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('COULD_NOT_LOAD_SAMPLE_SOLUTION')));\n            });\n        });\n        \n        // Handle user event for loading solutions of other users\n        tv.addEventListener('coding-ars-show-solutions', () => {\n            console.log(`list solutions for task ${task}`);\n            codingArs.listSolutions(task).then(data => {\n                tv.controller.showSolutions(data);\n            }).catch(err => {\n                console.error(String(err));\n                if(err.status == 400) {\n                    target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('OWN_SOLUTION_REQUIRED')));\n                } else {\n                    target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('NO_SAMPLE_SOLUTION')));\n                }\n            });\n        }, true);\n        \n        // Handle user event for adding thumb up or down to solutions from other users\n        tv.addEventListener('coding-ars-thumb-up', ev => {\n            console.log(`thumb up solution ${ev.solutionRef} for task ${task}`);\n            codingArs.thumbToggle(ev.solutionRef).then(result => {\n                tv.controller.updateThumbs(ev.solutionRef, result.thumbs, result.thumbed);\n            }).catch(err => {\n                console.error(String(err));\n                target.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_1__.errorMessage)(translate('ERROR_WHILE_GRADING')));\n            });\n        }, true);\n    });\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/controller/task.js?");

/***/ }),

/***/ "./client/language.js":
/*!****************************!*\
  !*** ./client/language.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   translate: () => (/* binding */ translate),\n/* harmony export */   translator: () => (/* binding */ translator)\n/* harmony export */ });\n/**\n * General Usage:\n * import { translator } from \"../language\";\n * \n * const translate = translator(options.language);\n * console.log(translate('SOME_STR'));\n * \n * ... or ...\n * \n * import { translate } from \"../language\";\n * \n * console.log(translate(options.language, 'SOME_STR'));\n */\n\nconst texts = {\n    'de': {\n        'COULD_NOT_FIND_TASK_COLLECTION': \"Konnte Aufgabensammlung nicht laden\",\n        'COULD_NOT_START_TASK': \"Konnte Aufgabe nicht starten, Aufgabenname fehlt!\",\n        'COULD_NOT_LOAD_TASK': \"Konnte Aufgabe nicht laden\",\n        'NO_OUTPUT': \"Keine Ausgaben...\",\n        'ERROR_WHILE_RUNNING_CODE': 'Fehler beim Ausführen des Codes',\n        'ERROR_WHILE_TESTING_CODE': 'Fehler beim Testen des Codes',\n        'COULD_NOT_LOAD_SAMPLE_SOLUTION': 'Musterlösung konnten nicht geladen werden.',\n        'OWN_SOLUTION_REQUIRED': 'Lösungen können erst geladen werden, wenn eine eigene Lösung bereit liegt.',\n        'NO_SAMPLE_SOLUTION': 'Lösungen konnten nicht geladen werden.',\n        'ERROR_WHILE_GRADING': 'Fehler beim Bewerten der Lösung',\n        'START': \"Starten\",\n        'JOIN': \"Beitreten\",\n        'NO_KEY_PROVIDED': 'Kein Key eingegeben?',\n        'DESCRIPTION': 'Beschreibung',\n        'CONSOLE': 'Konsole',\n        'TERMINAL': 'Terminal',\n        'TESTS': 'Tests',\n        'SAMPLE_SOLUTION': 'Musterlösung',\n        'ASK_FOR_SHOW_SAMPLE_SOLUTION': \"Wirklich die Musterlösung anzeigen, bevor eine eigene Lösung umgesetzt wurde?\",\n        'SHOW': \"Anzeigen\",\n        'SOLUTIONS': \"Lösungen\",\n        'RESET_CURRENT_SOLUTION': 'Aktuellen Stand wirklich zurücksetzen?',\n        'ALREADY_TESTED': 'Bereits erfolgreich getestet!',\n        'SUCCESS_MSG_TESTS': \"Gratulation, die Tests waren erfolgreich\",\n        'FAILED_MSG_TESTS': \"Etwas stimmt noch nicht, prüfe deine Lösung\",\n        'COMPILE_ERROR_MSG': \"Compiler-Fehler, prüfe deinen Quellcode\",\n        'SUCCESS_MSG_RUN': \"Gratulation, die Lösung konnte ausgeführt werden.\",\n        'RESULT_IS': \"Ergebnis ist\",\n        'EXPECTED_WAS': \"ewartet war jedoch\",\n        'THE_RESULT_WAS': \"Das Ergebnis ist\",\n        'SEND': \"Senden\",\n        'START_HELP': \"Senden\",\n        'START_CODE_REVIEW': \"Starte Code-Review\",\n        'CODE_REVIEW': \"Code-Review\",\n        'CODE_REVIEW_NOTE': \"Deine Lösung ist bereit für einen Review. Starte den Code-Review, um deine Lösung einzusenden.\",\n        'CODE_HELP': \"Hilfe zur Aufgabe\",\n        'CODE_HELP_NOTE': \"Deine Lösung ist noch nicht fertig. Wenn du hilfe brauchst, frag danach.\",\n        'CODE_HELP_PLACEHOLDER': \"Was stimmt nicht mit meiner Lösung?\",\n        'CODE_ADDITIONAL_QUESTION_PLACEHOLDER': \"Kannst du das weiter erklären?\",\n        'RESULT': \"Ergebnis\",\n        'ERROR_WHILE_LOADING_CODE_REVIEW': \"Konnte Code-Review nicht laden\",\n        'I_DONT_WANT_TO_USE_CODE_REVIEW': \"Ich möchte kein Code-Review nutzen\",\n        'I_DONT_WANT_TO_USE_CODE_REVIEW_TEXT': \"Soll wirklich auf das Code-Review verzichtet werden? Die Lösung wird eingesendet, hinterlegt und von einem Dozierenden bewertet.\",\n        'CODE_REVIEW_TERMS': \"Hinweise zum Datenschutz\",\n        'CODE_REVIEW_TERMS_TEXT': \"Bei dieser Anwendung wird großer Wert auf den Schutz von Daten gelegt. Die Plattform ermöglicht es, Code-Aufgaben direkt im Browser zu lösen und die Ergebnisse zur Überprüfung an einen KI-Assistenten (wie Claude oder ChatGPT) zu senden, wobei anschließend Fragen zum Code gestellt werden können.\\n\\nDer eingegebene Code sowie alle Fragen werden an den KI-Assistenten übermittelt. Es ist wichtig zu beachten, dass keine personenbezogenen Daten in den Code oder die Fragen eingegeben werden sollten. Dies umfasst vollständige Namen, Kontaktdaten, Zugangsdaten, Passwörter, finanzielle Informationen oder andere identifizierende Informationen.\\n\\nDie KI-Assistenten werden von Drittanbietern bereitgestellt, und die Verarbeitung der übermittelten Daten erfolgt gemäß deren Datenschutzrichtlinien. Der Code und die Kommunikation mit dem KI-Assistenten können für Verbesserungen des Dienstes gespeichert werden.\\n\\nEs wird empfohlen, in Beispiel-Codes keine realen Zugangsdaten oder sensiblen Informationen zu verwenden, keinen Code zu schreiben, der auf personenbezogene oder vertrauliche Daten zugreift, und die Weitergabe von Informationen zu vermeiden, die Rückschlüsse auf die Identität zulassen können.\",\n        'ABORT': \"Abbrechen\",\n        'CONFIRM': \"Bestätigen\",\n        'NEW_SOLUTION_SUBMITTED': \"Neue Lösung eingereicht, bitte Code-Review starten.\",\n        'SUBMITTED_SOLUTION_SUCCESSFUL': \"Ihre Lösung wurde erfolgreich eingereicht.\",\n        'SUBMITTED_SOLUTION_WITH_NO_CODE_REVIEW': \"Ihre Lösung wurde eingereicht, ohne Code-Review.\",\n        'SUBMITTED_SOLUTION_WITH_BAD_SCORE': \"Ihre Lösung wurde eingereicht, aber die Bewertung ist nicht gut genug (min. {{score}}).\",\n        'CODE_REVIEW_FAILED': \"Fehler bei Code-Review, bitte noch einmal versuchen\",\n        'THIS_IS_A_BAD_REVIEW': \"Der Review stimmt nicht\",\n        'THIS_IS_A_BAD_REVIEW_TEXT': \"Der Review scheint nicht zu stimmen. Bitte prüfe meine Lösung und diesen Review.\",\n        'THIS_IS_A_BAD_REVIEW_PLACEHOLDER': \"Was stimmt nicht?\",\n        'MAX_CODE_REVIEW_NOTE': \"Sie haben die maximale Anzahl an Fragen erreicht.\",\n        'SUBMITTED_SOLUTION_MISSING_CODE_REVIEW': \"Lösung wurde eingereicht, aber ohne Code-Review. Bitte Code erneut ausführen.\",\n        'PLEASE_RUN_CODE_AGAIN': \"Bitte führen Sie Ihren Code erneut aus und starten Sie den Code-Review.\",\n        'MIN_SCORE_NOTE': \"Für diese Aufgabe ist ein Review notwendig, der Score sollte dabei mindestens {{score}} betragen. Wenn die Aufgabe erfolgreich ausgeführt wurde, starte den Code-Review.\",\n    },\n    'en': {\n        'COULD_NOT_FIND_TASK_COLLECTION': \"Could not load task collection\",\n        'COULD_NOT_START_TASK': \"Could not start task, task name is missing!\",\n        'COULD_NOT_LOAD_TASK': \"Could not load task\",\n        'NO_OUTPUT': \"No outputs...\",\n        'ERROR_WHILE_RUNNING_CODE': 'Error when running the code',\n        'ERROR_WHILE_TESTING_CODE': 'Error when testing the code',\n        'COULD_NOT_LOAD_SAMPLE_SOLUTION': 'Sample solution could not be loaded.',\n        'OWN_SOLUTION_REQUIRED': 'Solutions can only be loaded when a personal solution is ready.',\n        'NO_SAMPLE_SOLUTION': 'Solutions could not be loaded.',\n        'ERROR_WHILE_GRADING': 'Error when grading the solution',\n        'START': \"Start\",\n        'JOIN': \"Join\",\n        'NO_KEY_PROVIDED': 'No key provided?',\n        'DESCRIPTION': 'Description',\n        'CONSOLE': 'Console',\n        'TERMINAL': 'Terminal',\n        'TESTS': 'Tests',\n        'SAMPLE_SOLUTION': 'Sample Solution',\n        'ASK_FOR_SHOW_SAMPLE_SOLUTION': \"Do you really want to display the sample solution before providing your own solution?\",\n        'SHOW': \"Show\",\n        'SOLUTIONS': \"Solutions\",\n        'RESET_CURRENT_SOLUTION': 'Really reset the current status?',\n        'ALREADY_TESTED': 'Already successfully tested!',\n        'SUCCESS_MSG_TESTS': \"Congratulations, the tests were successful\",\n        'FAILED_MSG_TESTS': \"Something is still wrong, check your solution\",\n        'COMPILE_ERROR_MSG': \"Compiler errors, check your source code\",\n        'SUCCESS_MSG_RUN': \"Congratulations, the solution has been successfully executed.\",\n        'RESULT_IS': \"The result is\",\n        'EXPECTED_WAS': \"but should be\",\n        'THE_RESULT_WAS': \"The result was\",\n        'SEND': \"Send\",\n        'START_HELP': \"Send\",\n        'START_CODE_REVIEW': \"Start Code Review\",\n        'CODE_REVIEW': \"Code Review\",\n        'CODE_REVIEW_NOTE': \"Your current solution is ready for review. Start the code review, to submit your solution.\",\n        'CODE_HELP': \"Help with this Task\",\n        'CODE_HELP_NOTE': \"Your current solution is not ready for review. If you need help, ask for it.\",\n        'CODE_HELP_PLACEHOLDER': \"What do i miss with my current solution?\",\n        'CODE_ADDITIONAL_QUESTION_PLACEHOLDER': \"Can you explain this further?\",\n        'RESULT': \"Result\",\n        'ERROR_WHILE_LOADING_CODE_REVIEW': \"Could not load code review\",\n        'I_DONT_WANT_TO_USE_CODE_REVIEW': \"I don't want to use code review\",\n        'I_DONT_WANT_TO_USE_CODE_REVIEW_TEXT': \"Do you really want to do without the code review? The solution is sent in, stored and assessed by a lecturer.\",\n        'CODE_REVIEW_TERMS': \"Privacy Notice\",\n        'CODE_REVIEW_TERMS_TEXT': \"This application places great importance on data protection. The platform allows users to solve coding tasks directly in the browser and send the results to an AI assistant (such as Claude or ChatGPT) for review, after which questions about the code can be asked.\\n\\nThe entered code and all questions are transmitted to the AI assistant. It is important to note that no personal data should be entered into the code or questions. This includes full names, contact details, access data, passwords, financial information, or other identifying information.\\n\\nThe AI assistants are provided by third-party vendors, and the processing of submitted data is carried out in accordance with their privacy policies. The code and communication with the AI assistant may be stored for service improvements.\\n\\nIt is recommended not to use real access data or sensitive information in example code, not to write code that accesses personal or confidential data, and to avoid sharing information that could allow conclusions about one's identity.\",\n        'ABORT': \"Abort\",\n        'CONFIRM': \"Confirm\",\n        'NEW_SOLUTION_SUBMITTED': \"New solution submitted, start code review.\",\n        'SUBMITTED_SOLUTION_SUCCESSFUL': \"Your solution has been submitted successfully.\",\n        'SUBMITTED_SOLUTION_WITH_NO_CODE_REVIEW': \"Your solution has been submitted successfully with no code review.\",\n        'SUBMITTED_SOLUTION_WITH_BAD_SCORE': \"Your solution has been submitted but the score is not good enough (min. {{score}}).\",\n        'THIS_IS_A_BAD_REVIEW': \"Review seems to be bad\",\n        'THIS_IS_A_BAD_REVIEW_TEXT': \"The review seems to be bad. Please check my solution and this review.\",\n        'THIS_IS_A_BAD_REVIEW_PLACEHOLDER': \"What is wrong?\",\n        'MAX_CODE_REVIEW_NOTE': \"You have reached the maximum number of questions.\",\n        'SUBMITTED_SOLUTION_MISSING_CODE_REVIEW': \"Solution has been submitted, but no code review. Please run code again.\",\n        'PLEASE_RUN_CODE_AGAIN': \"Please run code your again and trigger code review.\",\n        'MIN_SCORE_NOTE': \"For this task, a review is required, the score should be at least {{score}}. If the task was successfully executed, start the code review.\",\n    }\n}\n\nfunction translate(language, name, _default = \"\", replacements = undefined) {\n    let text = texts[language] && texts[language][name] ? texts[language][name] : (_default || name);\n    if(replacements) {\n        for (const [key, value] of Object.entries(replacements)) {\n            text = text.replace(new RegExp(`{{${key}}}`, 'g'), value);\n        }\n    }\n    return text;\n}\n\nfunction translator(language) {\n    return (name, _default, args = undefined) => translate(language, name, _default, args);\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/language.js?");

/***/ }),

/***/ "./client/service/broadcast.js":
/*!*************************************!*\
  !*** ./client/service/broadcast.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BroadcastService: () => (/* binding */ BroadcastService)\n/* harmony export */ });\nlet counter = 1;\n/**\n * Manage listeners for request-response simulation\n * in Iframe communications.\n */\nclass BroadcastService {\n    constructor(target) {\n        this.listeners = {};\n        this.refIds = 1;\n        this.target = target;\n        this.counter = counter ++;\n\n        let self = this;\n\n        /**\n         * Wait for messages in window, used to (bidirectional) \n         * communicated between iframes and main frame.\n         */\n        window.addEventListener('message', (event) => {\n            let data = event.data;\n            if(data && data.ref) {\n                self.dispatch(data.ref, data);\n            }\n        });\n    }\n    \n    dispatch(ref, data) {\n        if (this.listeners[ref]) {\n            this.listeners[ref](data);\n        }\n    }\n\n    wait(ref) {\n        return new Promise((resolve, reject) => {\n            this.listeners[ref] = data => {\n                resolve(data);\n            };\n        })\n    }\n\n    generateRefId() {\n        return this.counter + \"-\" + this.refIds ++;\n    }\n\n    addRef(data) {\n        data.ref = this.generateRefId()\n        return data;\n    }\n\n    send(data) {\n        data = this.addRef(data);\n        this.target.postMessage(data, \"*\");\n        return this.wait(data.ref);\n    }\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/service/broadcast.js?");

/***/ }),

/***/ "./client/service/codingars.js":
/*!*************************************!*\
  !*** ./client/service/codingars.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodingArsService: () => (/* binding */ CodingArsService)\n/* harmony export */ });\n/* harmony import */ var _backend_route_helper_callback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../backend/route/helper/callback */ \"../backend/route/helper/callback.js\");\n/* harmony import */ var _backend_route_helper_callback__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_backend_route_helper_callback__WEBPACK_IMPORTED_MODULE_0__);\n\n\nclass CodingArsError {\n    constructor(status, msg, url) {\n        this.status = status;\n        this.msg = msg;\n        this.url = url;\n    }\n    toString() {\n        return `Error while calling ${this.url}${this.msg ? ':' + this.msg : ''}`;\n    }\n}\n\nconst getUrl = (url, path) => url + (url.endsWith('/') ? '' : '/') + path\n\nconst get = function (url, path) {\n    return new Promise((resolve, reject) => {\n        const xhttp = new XMLHttpRequest();\n        let fullUrl = getUrl(url, path);\n        xhttp.open(\"GET\", fullUrl, true);\n        xhttp.withCredentials = true;\n        xhttp.addEventListener(\"readystatechange\", () => {\n            if (xhttp.readyState == 4) {\n                if (xhttp.status == 200) {\n                    resolve(JSON.parse(xhttp.responseText));\n                } else if (xhttp.status == 204) {\n                    resolve();\n                } else {\n                    let data = \"\";\n                    try {\n                        data = JSON.parse(xhttp.responseText);\n                    } catch (e) {\n                        data = xhttp.responseText;\n                    }\n                    reject(new CodingArsError(xhttp.status, data.msg ? data.msg : data, fullUrl))\n                }\n            }\n        })\n        xhttp.send();\n    })\n}\n\nconst post = function (url, path, body) {\n    return new Promise((resolve, reject) => {\n        const xhttp = new XMLHttpRequest();\n        let fullUrl = getUrl(url, path);\n        xhttp.open(\"POST\", fullUrl, true);\n        xhttp.withCredentials = true;\n        xhttp.addEventListener(\"readystatechange\", () => {\n            if (xhttp.readyState == 4) {\n                if (xhttp.status == 200) {\n                    resolve(JSON.parse(xhttp.responseText));\n                } else if (xhttp.status == 204) {\n                    resolve();\n                } else {\n                    let data = \"\";\n                    try {\n                        data = JSON.parse(xhttp.responseText);\n                    } catch (e) {\n                        data = xhttp.responseText;\n                    }\n                    reject(new CodingArsError(xhttp.status, data.msg ? data.msg : data), fullUrl)\n                }\n            }\n        })\n\n        xhttp.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        xhttp.send(JSON.stringify(body));\n    })\n}\n\nasync function postWithSse(url, path, body, callback) {\n    try {\n        let fullUrl = getUrl(url, path);\n        const response = await fetch(fullUrl, {\n            credentials: 'include',\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'text/event-stream'\n            },\n            body: JSON.stringify(body)\n        });\n\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n\n        let buffer = \"\";\n        while (true) {\n            const {value, done} = await reader.read();\n            if (done) break;\n            \n            buffer += decoder.decode(value);\n            const lines = buffer.split('\\n');\n            buffer = lines.pop() || ''; // Unvollständige Zeile für nächsten Chunk aufheben\n    \n            for (const line of lines) {\n                if (line.trim() === '') continue;\n                if (line.trim() === 'data: [DONE]') {\n                    callback({done: true});\n                    return;\n                }\n                if (line.startsWith('data: ')) {\n                    try {\n                        const jsonData = JSON.parse(line.slice(6)); // \"data: \" entfernen\n                        callback(jsonData);\n                    } catch (e) {\n                        console.error('Error parsing JSON:', line, e);\n                    }\n                }\n            }\n        }\n    } catch (error) {\n        console.error('SSE Error:', error);\n    }\n}\n\n/**\n * Session buffer in active clients (on webpage might have \n * multiple running sessions)\n */\nconst sessions = {};\n\nclass CodingArsService {\n    constructor(url, context) {\n        this.url = url;\n        this.context = context;\n    }\n    join (key) {\n        return get(this.url, \"join/\" + key).then(data => new Promise(resolve => {\n            this.collectionRef = data.id;\n            resolve(self.collectionRef);\n        }));\n    }\n    reJoin (id) {\n        this.collectionRef = id;\n        return new Promise(resolve => {\n            resolve(id);\n        });\n    }\n    task (task) {\n        return get(this.url, \"task/\" + this.collectionRef + \"/\" + task)\n    }\n    loadUrl (task) {\n        return getUrl(this.url, \"load/\" + this.collectionRef + \"/\" + task)\n    }\n    sampleSolution (task) {\n        return get(this.url, \"sample-solution/\" + this.collectionRef + \"/\" + task)\n    }\n    collection () {\n        return get(this.url, \"collection/\" + this.collectionRef)\n    }\n    run (task, sources) {\n        return post(this.url, \"run/\" + this.collectionRef + \"/\" + task + \"?context=\" + encodeURIComponent(this.context), { sources })\n    }\n    save (task, sources) {\n        return post(this.url, \"save/\" + this.collectionRef + \"/\" + task, { sources })\n    }\n    test (task, sources) {\n        return post(this.url, \"test/\" + this.collectionRef + \"/\" + task + \"?context=\" + encodeURIComponent(this.context), { sources })\n    }\n    listSolutions (task) {\n        return get(this.url, \"solution/\" + this.collectionRef + \"/\" + task)\n    }\n    thumbToggle (solution) {\n        return get(this.url, \"solution/\" + this.collectionRef + \"/thumb-toggle/\" + solution)\n    }\n    identify (token) {\n        return post(this.url, \"identify/\" + this.collectionRef, {token})\n    }\n\n    /**\n     * If user does not wish to use code review, this method can be used. This one stores\n     * a information with current result and a marker, that they dont want to use code review.\n     * \n     * @param {*} language language this client runs currently, like de or en\n     * @param {*} task current task id, like \"task1\"\n     * @param {*} sources array of sources as used in other api methods\n     * @returns promise with result of no code review\n     */\n    noCodeReview(language, task, sources) {\n        return post(this.url, \"code-review/no-review/\" + this.collectionRef + \"/\" + task + \"?context=\" + encodeURIComponent(this.context) + \"&language=\" + language, {sources});\n    }\n\n    /**\n     * If user selects a review as bad, this method can be used. This one stores\n     * a information with into the chat and adds a log message.\n     * \n     * @param {*} language language this client runs currently, like de or en\n     * @param {*} task current task id, like \"task1\"\n     * @param {*} sources array of sources as used in other api methods\n     * @returns promise with result of no code review\n     */\n    badCodeReview(language, ref, message) {\n        return post(this.url, \"code-review/bad-review/\" + this.collectionRef + \"/\" + ref + \"?context=\" + encodeURIComponent(this.context) + \"&language=\" + language, {message});\n    }\n\n    /**\n     * Start SSE based code review with current sources\n     * \n     * @param {*} language language this client runs currently, like de or en\n     * @param {*} task current task id, like \"task1\"\n     * @param {*} sources array of sources as used in other api methods\n     * @param {*} callback method to receive sse updates\n     * @returns promise, resolves when sse is done\n     */\n    codeReview(language, task, sources, callback) {\n        return postWithSse(this.url, \"code-review/init/\" + this.collectionRef + \"/\" + task + \"?context=\" + encodeURIComponent(this.context) + \"&language=\" + language, {sources}, callback);\n    }\n\n    /**\n     * Start SSE based code help with current sources, it is the same as review, server will check if\n     * it is a help or review\n     * \n     * @param {*} language language this client runs currently, like de or en\n     * @param {*} task current task id, like \"task1\"\n     * @param {*} sources array of sources as used in other api methods\n     * @param {*} callback method to receive sse updates\n     * @returns promise, resolves when sse is done\n     */\n    codeHelp(language, task, sources, message, callback) {\n        return postWithSse(this.url, \"code-review/init/\" + this.collectionRef + \"/\" + task + \"?context=\" + encodeURIComponent(this.context) + \"&language=\" + language + \"&message=\" + encodeURIComponent(message), {sources}, callback);\n    }\n\n    /**\n     * Ask question based on current code review / help\n     * \n     * @param {*} language language this client runs currently, like de or en\n     * @param {*} ref codeReview call will give a ref, which is used here to continue the conversation\n     * @param {*} message additional message for this conversation\n     * @param {*} callback method to receive sse updates\n     * @returns promise, resolves when sse is done\n     */\n    codeReviewContinue(language, ref, message, callback) {\n        return postWithSse(this.url, \"code-review/continue/\" + this.collectionRef + \"/\" + ref + \"?language=\" + language, {message}, callback);\n    }\n\n    /**\n     * When editor is restartet, this might be used to load the latest code review\n     * \n     * @param {*} task current task id, like \"task1\"\n     * @returns object with messages array\n     */\n    codeReviewLoadLatest(task) {\n        return get(this.url, \"code-review/load/\" + this.collectionRef + \"/\" + task);\n    }\n\n    static join(url, key, context = \"\") {\n        return new Promise((resolve, reject) => {\n            const ref = url + '@' + key + '?' + context;\n            if (sessions[ref]) {\n                return resolve(sessions[ref]);\n            }\n            let service = new CodingArsService(url, context);\n            service.join(key).then(collection => {\n                sessions[ref] = service;\n                resolve(service);\n            }).catch(err => reject(err));\n        })\n    }\n\n    static reJoin(url, session, context = \"\") {\n        return new Promise((resolve, reject) => {\n            const ref = url + '@' + key + '?' + context;\n            if (sessions[ref]) {\n                return resolve(sessions[ref]);\n            }\n            let service = new CodingArsService(url, context);\n            service.reJoin(session).then(collection => {\n                sessions[ref] = service;\n                resolve(service);\n            }).catch(err => reject(err));\n        })\n    }\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/service/codingars.js?");

/***/ }),

/***/ "./client/service/editor.js":
/*!**********************************!*\
  !*** ./client/service/editor.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorService: () => (/* binding */ EditorService)\n/* harmony export */ });\n/* harmony import */ var _broadcast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./broadcast.js */ \"./client/service/broadcast.js\");\n\n\nclass EditorService {\n    constructor(target) {\n        this.broadcaster = new _broadcast_js__WEBPACK_IMPORTED_MODULE_0__.BroadcastService(target);\n    }\n\n    create(sources) {\n        return this.broadcaster.send({ command: \"create\", sources });\n    }\n\n    switch(path) {\n        return this.broadcaster.send({ command: \"switch\", path });\n    }\n\n    reset() {\n        return this.broadcaster.send({ command: \"reset\" });\n    }\n\n    dispose() {\n        return this.broadcaster.send({ command: \"dispose\" });\n    }\n\n    value() {\n        return this.broadcaster.send({ command: \"value\" });\n    }\n\n    prepare() {\n        return this.broadcaster.send({ command: \"prepare\" });\n    }\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/service/editor.js?");

/***/ }),

/***/ "./client/utils/fixPath.js":
/*!*********************************!*\
  !*** ./client/utils/fixPath.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fixPath: () => (/* binding */ fixPath)\n/* harmony export */ });\nfunction fixPath (p) {\n    return p && !p.endsWith('/') ? p + '/' : p;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/utils/fixPath.js?");

/***/ }),

/***/ "./client/utils/message.js":
/*!*********************************!*\
  !*** ./client/utils/message.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   commonMessage: () => (/* binding */ commonMessage),\n/* harmony export */   errorMessage: () => (/* binding */ errorMessage),\n/* harmony export */   successMessage: () => (/* binding */ successMessage)\n/* harmony export */ });\nfunction commonMessage(msg) {\n    let ev = new Event('coding-ars-common');\n    ev.msg = msg;\n    return ev;\n}\nfunction errorMessage(msg) {\n    let ev = new Event('coding-ars-error');\n    ev.msg = msg;\n    return ev;\n}\nfunction successMessage(msg) {\n    let ev = new Event('coding-ars-success');\n    ev.msg = msg;\n    return ev;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/utils/message.js?");

/***/ }),

/***/ "./client/view/collection.js":
/*!***********************************!*\
  !*** ./client/view/collection.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectionView: () => (/* binding */ collectionView)\n/* harmony export */ });\n/* harmony import */ var _element_collapsible__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element/collapsible */ \"./client/view/element/collapsible.js\");\n/* harmony import */ var _language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../language */ \"./client/language.js\");\n\n\n\nlet lastTask = undefined;\n\nfunction collectionView(options) {\n    const translate = (0,_language__WEBPACK_IMPORTED_MODULE_1__.translator)(options.language);\n    let container = document.createElement('div');\n    container.classList.add('coding-ars-task-selection');\n    let tasks = [];\n    container.addEventListener('coding-ars-info-start-open', () => tasks.forEach(el => el.controller.close()), true);\n    container.controller = {\n        show: (data) => {\n            let firstNotTested = false;\n            (data.tasks || []).forEach(el => {\n                if(!el.title) {\n                    return;\n                }\n                let task = (0,_element_collapsible__WEBPACK_IMPORTED_MODULE_0__.collapsibleViewElement)();\n                tasks.push(task);\n                task.controller.title(el.title)\n                el.description = el.description || \"\";\n                task.controller.textContent(marked ? marked.parse(el.description) : el.description)\n\n                let buttons = document.createElement('div');\n                buttons.classList.add('coding-ars-buttons');\n                let start = document.createElement('button');\n                start.textContent = translate(\"START\");\n                start.classList.add('active');\n                start.addEventListener('click', _ => {\n                    let ev = new Event('coding-ars-start-task');\n                    ev.task = el.name;\n                    container.dispatchEvent(ev);\n                })\n                buttons.appendChild(start);\n                task.controller.appendToContent(buttons);\n\n                container.appendChild(task);\n\n                if(el.testsOk) {\n                    task.controller.good();\n                } else {\n                    if(!firstNotTested) {\n                        task.controller.open();\n                        firstNotTested = el.name;\n                    }\n                    if(el.name == lastTask) {\n                        task.controller.open();\n                        firstNotTested = el.name;\n                    }\n                }\n\n                // Need to be done after\n                task.addEventListener('coding-ars-info-start-open', () => lastTask = el.name);\n            })\n        }\n    };\n    return container;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/collection.js?");

/***/ }),

/***/ "./client/view/element/buttonBar.js":
/*!******************************************!*\
  !*** ./client/view/element/buttonBar.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buttonBarViewElement: () => (/* binding */ buttonBarViewElement)\n/* harmony export */ });\n/* harmony import */ var _loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loader */ \"./client/view/element/loader.js\");\n\n\nfunction buttonBarViewElement() {\n    const controllButtons = document.createElement('ul');\n    controllButtons.classList.add('coding-ars-button-bar');\n    controllButtons.controller = {};\n    controllButtons.controller.addButton = (name, timeout) => {\n        timeout = timeout || 2000;\n        const button = document.createElement('li');\n        if(name.endsWith('-icon')) {\n            button.classList.add(name);\n            button.classList.add('icon');\n        } else {\n            button.textContent = name;\n        }\n        button.classList.add('coding-ars-button-bar-element');\n        button.appendChild((0,_loader__WEBPACK_IMPORTED_MODULE_0__.loaderViewElement)());\n        controllButtons.appendChild(button);\n        let timer;\n        button.controller = {\n            wait: () => {\n                button.controller.stopWait();\n                button.controller.enable();\n                timer = window.setTimeout(() => {\n                    button.controller.stopWait();\n                }, timeout)\n                button.classList.add('wait');\n            },\n            hide: () => {\n                button.style.display = 'none';\n            },\n            show: () => {\n                button.style.display = '';\n            },\n            stopWait: () => {\n                if(timer) {\n                    window.clearTimeout(timer);\n                }\n                button.classList.remove('wait')\n            },\n            disable: () => {\n                button.controller.stopWait();\n                button.controller.enable();\n                timer = window.setTimeout(() => {\n                    button.controller.enable();\n                }, timeout)\n                button.classList.add('coding-ars-disabled');\n            },\n            enable: () => {\n                button.classList.remove('coding-ars-disabled');\n            },\n            isEnabled: () => !button.classList.contains('coding-ars-disabled'),\n            isWaiting: () => button.classList.contains('wait')\n        };\n        return button;\n    }\n    return controllButtons;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/element/buttonBar.js?");

/***/ }),

/***/ "./client/view/element/collapsible.js":
/*!********************************************!*\
  !*** ./client/view/element/collapsible.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collapsibleViewElement: () => (/* binding */ collapsibleViewElement)\n/* harmony export */ });\nfunction collapsibleViewElement() {\n    let box = document.createElement(\"div\");\n    box.classList.add('coding-ars-info-box');\n\n    let button = document.createElement(\"button\");\n    button.classList.add(\"coding-ars-info-collapsible\");\n    button.addEventListener('click', () => box.controller.toggle());\n    box.appendChild(button);\n\n    let content = document.createElement(\"div\");\n    content.classList.add(\"coding-ars-info-content\");\n    box.appendChild(content);\n\n    box.controller = {\n        appendToContent: (el) => content.appendChild(el),\n        textContent: (text) => content.innerHTML = text,\n        title: (text) => button.textContent = text,\n        toggle: () => {\n            if (button.classList.contains(\"coding-ars-disabled\")) {\n                return false;\n            }\n            if (content.style.maxHeight) {\n                box.controller.close();\n            } else {\n                box.controller.open();\n            }\n        },\n        fixContent: () => {\n            content.style.maxHeight = content.scrollHeight + \"px\";\n        },\n        open: () => {\n            box.dispatchEvent(new Event('coding-ars-info-start-open'));\n            button.classList.add('coding-ars-info-active');\n            content.style.maxHeight = content.scrollHeight + \"px\";\n        },\n        close: () => {\n            button.classList.remove('coding-ars-info-active');\n            content.style.maxHeight = null;\n        },\n        disable: () => {\n            button.classList.add(\"coding-ars-disabled\")\n        },\n        enable: () => {\n            button.classList.remove(\"coding-ars-disabled\")\n        },\n        good: () => {\n            button.classList.remove(\"wrong\", \"neutral\")\n            button.classList.add(\"done\")\n        },\n        bad: () => {\n            button.classList.remove(\"done\", \"neutral\")\n            button.classList.add(\"wrong\")\n        },\n        neutral: () => {\n            button.classList.remove(\"done\", \"wrong\")\n            button.classList.add(\"neutral\")\n        },\n        activate: () => {\n            box.controller.enable();\n            if(button.classList.contains(\"coding-ars-info-active\")) {\n                box.controller.toggle();\n            }\n            box.controller.toggle();\n        }\n    };\n\n    return box;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/element/collapsible.js?");

/***/ }),

/***/ "./client/view/element/editor.js":
/*!***************************************!*\
  !*** ./client/view/element/editor.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   editorViewElement: () => (/* binding */ editorViewElement)\n/* harmony export */ });\n/* harmony import */ var _utils_fixPath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/fixPath */ \"./client/utils/fixPath.js\");\n/* harmony import */ var _service_editor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../service/editor */ \"./client/service/editor.js\");\n\n\n\nfunction editorViewElement(options) {\n    const clientBase = (0,_utils_fixPath__WEBPACK_IMPORTED_MODULE_0__.fixPath)(options.clientBase || \"\");\n    const monacoBase = (0,_utils_fixPath__WEBPACK_IMPORTED_MODULE_0__.fixPath)(options.monacoBase || \"\"); // e.g. _assets/vendor/vs\n\n    let mainContainer = document.createElement(\"iframe\");\n    mainContainer.style.border = \"none\";\n    mainContainer.style.overflow = \"hidden\";\n\n    mainContainer.controller = {\n        initiated: () => {\n            let shadowDocument = mainContainer.contentDocument;\n            return !!shadowDocument.getElementById('editor-container');\n        },\n        init: () => {\n            return new Promise((resolve, reject) => {\n                let shadowDocument = mainContainer.contentDocument.body;\n                shadowDocument.style.overflow = 'hidden';\n                const innerContainer = document.createElement('div');\n                shadowDocument.appendChild(innerContainer);\n                innerContainer.style.width = '100%';\n                innerContainer.style.height = '100%';\n                innerContainer.id = 'editor-container';\n                innerContainer.setAttribute('data-monaco-base', monacoBase);\n                // Note: In safari is currently an interaction btw. any element \n                //   loaded before css content from monaco. Thus, clean loading\n                //   of editor.main.css and than add additional styles.\n                // <link rel=\"stylesheet\" href=\"styles.css\"></link>\n                const innerLink = document.createElement('link');\n                innerLink.setAttribute('rel', 'stylesheet');\n                innerLink.setAttribute('href', monacoBase + 'editor/editor.main.css');\n                shadowDocument.appendChild(innerLink);\n                innerLink.addEventListener('load', _ => {\n                    const innerStyle = document.createElement('style');\n                    innerStyle.innerText = 'body, html { margin: 0; }';\n                    shadowDocument.appendChild(innerStyle);\n\n                    // <script src=\"../node_modules/monaco-editor/min/vs/loader.js\"></script>\n                    const loaderScript = document.createElement('script');\n                    loaderScript.setAttribute(\"src\", monacoBase + \"loader.js\");\n                    shadowDocument.appendChild(loaderScript)\n                    loaderScript.addEventListener(\"load\", _ => {\n                        const mainScript = document.createElement('script');\n                        mainScript.setAttribute(\"src\", clientBase + \"editor-controller.js\");\n                        shadowDocument.appendChild(mainScript);\n                        mainScript.addEventListener(\"load\", _ => {\n                            let editorService = new _service_editor__WEBPACK_IMPORTED_MODULE_1__.EditorService(mainContainer.contentWindow);\n                            editorService.prepare().then(() => {\n                                resolve(editorService);\n                            });\n                        });\n                    });\n                });\n            });\n        }\n    }\n\n    return mainContainer;\n};\n\n//# sourceURL=webpack://coding-ars-client/./client/view/element/editor.js?");

/***/ }),

/***/ "./client/view/element/fileSelector.js":
/*!*********************************************!*\
  !*** ./client/view/element/fileSelector.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fileSelectorViewElement: () => (/* binding */ fileSelectorViewElement)\n/* harmony export */ });\nfunction fileSelectorViewElement() {\n    let fileSelector = document.createElement(\"ul\");\n    fileSelector.classList.add('coding-ars-file-bar')\n    let fileEntries = [];\n    fileSelector.controller = {\n        activate: (i) => {\n            fileEntries[i].controller.activate();\n        },\n        add: (name, clickCallback) => {\n            let fileEntry = document.createElement(\"li\");\n            fileEntry.textContent = name;\n            fileSelector.appendChild(fileEntry);\n            let activate = () => fileEntry.classList.add('active');\n            let deactivate = () => fileEntry.classList.remove('active');\n            fileEntries.push(fileEntry);\n            fileEntry.controller = {activate, deactivate};\n            \n            fileEntry.addEventListener('click', () => {\n                fileEntries.forEach(el => el.controller.deactivate());\n                clickCallback(activate);\n            })\n        }\n    }\n    return fileSelector;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/element/fileSelector.js?");

/***/ }),

/***/ "./client/view/element/loader.js":
/*!***************************************!*\
  !*** ./client/view/element/loader.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loaderViewElement: () => (/* binding */ loaderViewElement)\n/* harmony export */ });\nfunction loaderViewElement () {\n    // <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n    let loader = document.createElement(\"div\");\n    loader.classList.add(\"lds-ring\");\n    loader.innerHTML = \"<div></div><div></div><div></div><div></div>\"\n    return loader;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/element/loader.js?");

/***/ }),

/***/ "./client/view/element/modal.js":
/*!**************************************!*\
  !*** ./client/view/element/modal.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   modalViewElement: () => (/* binding */ modalViewElement)\n/* harmony export */ });\nfunction modalViewElement() {\n    // Modal Container erstellen\n    const modalContainer = document.createElement('div');\n    modalContainer.classList.add('coding-ars-modal-container');\n    modalContainer.style.display = 'none';\n    \n    // Modal Content Wrapper\n    const modalContent = document.createElement('div');\n    modalContent.classList.add('coding-ars-modal-content');\n    \n    // Schließen-Button\n    const closeButton = document.createElement('span');\n    closeButton.classList.add('coding-ars-modal-close');\n    closeButton.innerHTML = '&times;';\n    \n    // Header-Bereich\n    const modalHeader = document.createElement('div');\n    modalHeader.classList.add('coding-ars-modal-header');\n    \n    const modalTitle = document.createElement('div');\n    modalTitle.classList.add('coding-ars-modal-title');\n    modalHeader.appendChild(modalTitle);\n    \n    // Body-Bereich\n    const modalBody = document.createElement('div');\n    modalBody.classList.add('coding-ars-modal-body');\n    \n    // Footer-Bereich\n    const modalFooter = document.createElement('div');\n    modalFooter.classList.add('coding-ars-modal-footer');\n    \n    // Content zusammensetzen\n    modalHeader.appendChild(closeButton);\n    modalContent.appendChild(modalHeader);\n    modalContent.appendChild(modalBody);\n    modalContent.appendChild(modalFooter);\n    modalContainer.appendChild(modalContent);\n    \n    // Overlay für Hintergrund-Dimming\n    const modalOverlay = document.createElement('div');\n    modalOverlay.classList.add('coding-ars-modal-overlay');\n    modalContainer.appendChild(modalOverlay);\n    \n    // Event-Listener für Schließen\n    closeButton.addEventListener('click', () => {\n        modalContainer.controller.close();\n    });\n    \n    modalOverlay.addEventListener('click', (event) => {\n        if (event.target === modalOverlay) {\n            modalContainer.controller.close();\n        }\n    });\n    \n    // ESC-Taste zum Schließen\n    document.addEventListener('keydown', (event) => {\n        if (event.key === 'Escape' && modalContainer.style.display !== 'none') {\n            modalContainer.controller.close();\n        }\n    });\n    \n    // Controller für das Modal\n    modalContainer.controller = {\n        open: (options = {}) => {\n            // Optionen verarbeiten\n            if (options.title) {\n                modalTitle.textContent = options.title;\n            }\n            \n            if (options.content) {\n                if (typeof options.content === 'string') {\n                    modalBody.innerHTML = options.content;\n                } else if (options.content instanceof HTMLElement) {\n                    modalBody.innerHTML = '';\n                    modalBody.appendChild(options.content);\n                }\n            }\n            \n            // Footer-Buttons löschen und ggf. neue erstellen\n            modalFooter.innerHTML = '';\n            \n            if (options.buttons && Array.isArray(options.buttons)) {\n                options.buttons.forEach(btnConfig => {\n                    const button = document.createElement('button');\n                    button.classList.add('coding-ars-modal-button');\n                    \n                    if (btnConfig.className) {\n                        button.classList.add(btnConfig.className);\n                    }\n                    \n                    button.textContent = btnConfig.text || 'Button';\n                    \n                    if (btnConfig.onClick && typeof btnConfig.onClick === 'function') {\n                        button.addEventListener('click', (e) => {\n                            btnConfig.onClick(e, modalContainer.controller);\n                        });\n                    }\n                    \n                    modalFooter.appendChild(button);\n                });\n                modalFooter.style.display = '';\n            } else {\n                modalFooter.style.display = 'none';\n            }\n            \n            // Modal anzeigen\n            document.body.classList.add('coding-ars-modal-open');\n            modalContainer.style.display = 'block';\n            \n            // Callback nach dem Öffnen\n            if (options.onOpen && typeof options.onOpen === 'function') {\n                options.onOpen(modalContainer);\n            }\n        },\n        \n        close: () => {\n            document.body.classList.remove('coding-ars-modal-open');\n            modalContainer.style.display = 'none';\n            \n            // Callback nach dem Schließen\n            if (modalContainer.controller.onClose && \n                typeof modalContainer.controller.onClose === 'function') {\n                modalContainer.controller.onClose();\n            }\n        },\n        \n        setContent: (content) => {\n            if (typeof content === 'string') {\n                modalBody.innerHTML = content;\n            } else if (content instanceof HTMLElement) {\n                modalBody.innerHTML = '';\n                modalBody.appendChild(content);\n            }\n        },\n        \n        setTitle: (title) => {\n            modalTitle.textContent = title;\n        },\n        \n        setOnClose: (callback) => {\n            if (typeof callback === 'function') {\n                modalContainer.controller.onClose = callback;\n            }\n        },\n        \n        isOpen: () => {\n            return modalContainer.style.display !== 'none';\n        }\n    };\n    \n    return modalContainer;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/element/modal.js?");

/***/ }),

/***/ "./client/view/element/solution.js":
/*!*****************************************!*\
  !*** ./client/view/element/solution.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   solutionViewElement: () => (/* binding */ solutionViewElement)\n/* harmony export */ });\n/* harmony import */ var _collapsible__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./collapsible */ \"./client/view/element/collapsible.js\");\n\nfunction solutionViewElement() {\n    let solutionContainer = document.createElement(\"div\");\n    solutionContainer.classList.add(\"coding-ars-solutions\");\n\n    let solutionContent = document.createElement(\"div\");\n    solutionContent.classList.add(\"coding-ars-solutions-content\");\n    solutionContainer.appendChild(solutionContent);\n\n    let elements = {};\n\n    solutionContainer.controller = {};\n    solutionContainer.controller.show = (data) => {\n        solutionContent.innerHTML = '';\n        let count = 0;\n        data.sort((a, b) => {\n            if(a.thumbs > b.thumbs) return -1;\n            if(a.thumbs < b.thumbs) return 1;\n            if(a.time > b.time) return -1;\n            if(a.time < b.time) return 1;\n            return 0;\n        })\n        data.forEach(el => {\n            let elementContainer = (0,_collapsible__WEBPACK_IMPORTED_MODULE_0__.collapsibleViewElement)();\n            let d = new Date(el.time);\n            elementContainer.controller.title(d.toLocaleDateString() + \" \" + d.toLocaleTimeString());\n\n            solutionContainer.addEventListener('coding-ars-info-start-open', () => elementContainer.controller.close(), true);\n\n            let sources = document.createElement('div');\n            sources.classList.add('sources');\n            (el.sources || []).forEach(source => {\n                let pre = document.createElement('pre');\n                let code = document.createElement('code');\n                code.textContent = source.content;\n                if((source.path || \"\").endsWith('.py')) {\n                    code.classList.add('python');\n                } else if((source.path || \"\").endsWith('.java')) {\n                    code.classList.add('java');\n                }\n                pre.appendChild(code);\n                sources.appendChild(pre);\n                hljs.highlightBlock(code);\n            });\n            elementContainer.controller.appendToContent(sources);\n            \n            let buttons = document.createElement('div');\n            buttons.classList.add('coding-ars-buttons');\n            let thumbs = document.createElement('span');\n            thumbs.textContent = el.thumbs ? el.thumbs + 'x' : '';\n            let thumbUp = document.createElement('button');\n            thumbUp.classList.add('up');\n            if(el.thumbed) {\n                thumbUp.classList.add('active');\n            }\n            thumbUp.addEventListener('click', _ => {\n                let ev = new Event('coding-ars-thumb-up');\n                ev.solutionRef = el.ref;\n                solutionContainer.dispatchEvent(ev);\n            })\n            buttons.appendChild(thumbs);\n            buttons.appendChild(thumbUp);\n            elementContainer.controller.appendToContent(buttons);\n\n            solutionContent.appendChild(elementContainer);\n\n            elements[el.ref] = {\n                thumbUp,\n                thumbs\n            }\n\n            if(count < 1) {\n                elementContainer.controller.toggle();\n            }\n            count ++;\n        });\n    };\n\n    solutionContainer.controller.updateThumbs = (ref, thumbs, thumbed) => {\n        if(!elements[ref]) {\n            return;\n        }\n        if(thumbed) {\n            elements[ref].thumbUp.classList.add('active');\n        } else {\n            elements[ref].thumbUp.classList.remove('active');\n        }\n        elements[ref].thumbs.textContent = thumbs ? thumbs + 'x' : '';\n    }\n    \n    return solutionContainer;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/element/solution.js?");

/***/ }),

/***/ "./client/view/element/tab.js":
/*!************************************!*\
  !*** ./client/view/element/tab.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tabViewElement: () => (/* binding */ tabViewElement)\n/* harmony export */ });\n/* harmony import */ var _loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loader */ \"./client/view/element/loader.js\");\n/* harmony import */ var _buttonBar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buttonBar */ \"./client/view/element/buttonBar.js\");\n\n\n\nfunction tabViewElement() {\n    // one line mode -> collabsed, nothing visible, only button line\n    // open mode -> when tab is selected\n    // allows to add tabs and buttons\n    // buttons are placed on right side\n    // collabses, when current tab is selected once more\n\n    const container = document.createElement('div');\n    const controllButtons = (0,_buttonBar__WEBPACK_IMPORTED_MODULE_1__.buttonBarViewElement)();\n    const tabButtons = document.createElement('ul');\n    const tabs = document.createElement('div');\n    const state = document.createElement('div');\n\n    container.classList.add('coding-ars-tabs-container');\n    tabButtons.classList.add('coding-ars-tabs-buttons');\n    controllButtons.classList.add('coding-ars-tabs-controller-buttons');\n    tabs.classList.add('coding-ars-tabs-content');\n\n    container.appendChild(tabButtons);\n    container.appendChild(controllButtons);\n    container.appendChild(tabs);\n    container.appendChild(state);\n\n    state.classList.add('coding-ars-tabs-state');\n    state.style.display = 'none';\n\n    container.controller = {};\n    container.controller.addButton = controllButtons.controller.addButton;\n    container.controller.STATE_SUCCESS = \"coding-ars-tabs-state-success\";\n    container.controller.STATE_FAILED = \"coding-ars-tabs-state-failed\";\n    container.controller.STATE_NEUTRAL = \"coding-ars-tabs-state-neutral\";\n    container.controller.setState = (text, style = \"\") => {\n        state.innerHTML = `<span>${text}</span>`;\n        state.classList.remove(container.controller.STATE_SUCCESS);\n        state.classList.remove(container.controller.STATE_FAILED);\n        state.classList.remove(container.controller.STATE_NEUTRAL);\n        state.classList.add(style || container.controller.STATE_NEUTRAL);\n        state.style.display = '';\n    };\n    container.controller.hideState = () => {\n        state.style.display = 'none';\n    };\n    container.controller.addTab = (name) => {\n        const tab = document.createElement('div');\n        tab.classList.add('coding-ars-tabs-entry');\n\n        const tabButton = document.createElement('li');\n        tabButton.textContent = name;\n\n        tabs.appendChild(tab);\n        tabButtons.appendChild(tabButton);\n\n        const activate = () => {\n            let wasActive = tab.classList.contains('active');\n            for(let i = 0; i < tabs.childNodes.length; i ++) {\n                tabs.childNodes[i].classList.remove('active');\n            }\n            for(let i = 0; i < tabButtons.childNodes.length; i ++) {\n                tabButtons.childNodes[i].classList.remove('active');\n            }\n            if(!wasActive) {\n                tab.classList.add('active');\n                tabButton.classList.add('active');\n                tab.dispatchEvent(new Event('coding-ars-tab-view-active'));\n            } else {\n                tab.dispatchEvent(new Event('coding-ars-tab-view-inactive'));\n            }\n        };\n\n        tabButton.addEventListener('click', activate)\n\n        tab.controller = {\n            replaceContent: (content) => {\n                tab.innerHTML = \"\";\n                tab.appendChild(content);\n            },\n            appendContent: (content) => {\n                tab.appendChild(content);\n            },\n            replaceContentWithText: (text) => {\n                tab.innerHTML = \"\";\n                tab.textContent = text;\n            },\n            hide: () => {\n                tabButton.style.display = 'none';\n            },\n            show: () => {\n                tabButton.style.display = '';\n            },\n            activate: () => {\n                if(!tab.classList.contains('active')) {\n                    activate();\n                }\n            }\n        };\n\n        return tab;\n    }\n    \n    return container;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/element/tab.js?");

/***/ }),

/***/ "./client/view/element/testResult.js":
/*!*******************************************!*\
  !*** ./client/view/element/testResult.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   testResultViewElement: () => (/* binding */ testResultViewElement)\n/* harmony export */ });\n/* harmony import */ var _language__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../language */ \"./client/language.js\");\n\n\nfunction testResultViewElement(options) {\n    const translate = (0,_language__WEBPACK_IMPORTED_MODULE_0__.translator)(options.language);\n    const successMessage = (type, message, expected, actual) => {\n        if(type == \"fail\" || type == \"assertTrue\") {\n            return message;\n        }\n        return `${message}: ${translate('RESULT_IS')} \"${expected}\"`\n    }\n    const failedMessage = (type, message, expected, actual) => {\n        if(type == \"fail\" || type == \"assertTrue\") {\n            return message;\n        }\n        return `${message}: ${translate('THE_RESULT_WAS')} \"${actual}\", ${translate('EXPECTED_WAS')} \"${expected}\"`;\n    }\n    \n    const container = document.createElement(\"div\");\n    container.classList.add('coding-ars-test-results');\n\n    container.controller = {};\n    container.controller.addResult = (result) => {\n        const element = document.createElement(\"div\");\n        if(result.failed && result.missing) {\n            element.classList.add('coding-ars-assert-missing');\n            element.textContent = failedMessage(result.type, result.message, result.expected, result.actual || \"\");\n        } else if(result.failed) {\n            element.classList.add('coding-ars-assert-failed');\n            element.textContent = failedMessage(result.type, result.message, result.expected, result.actual || \"\");\n        } else {\n            element.classList.add('coding-ars-assert-success');\n            element.textContent = successMessage(result.type, result.message, result.expected, result.actual || \"\");\n        }\n        container.appendChild(element);\n    }\n    container.controller.replaceResults = (results) => {\n        container.innerHTML = \"\";\n        for(let i = 0; i < results.length; ++ i) {\n            container.controller.addResult(results[i]);\n        }\n    }\n\n    return container;\n}\n\n// {\n//     \"compileResults\": [],\n//     \"message\": \"\",\n//     \"testOutput\": {\n//         \"message\": \"2 error(s)!\",\n//         \"errors\": [],\n//         \"testResults\": [\n//             {\n//                 \"failed\": true,\n//                 \"type\": \"assertEqualsString\",\n//                 \"message\": \"(REF00)\",\n//                 \"expected\": \"Wuff\",\n//                 \"actual\": \"\",\n//                 \"file\": \"NativeMethodAccessorImpl.java\",\n//                 \"line\": 62\n//             },\n//             {\n//                 \"failed\": true,\n//                 \"type\": \"assertEqualsString\",\n//                 \"message\": \"(REF01)\",\n//                 \"expected\": \"Miau\",\n//                 \"actual\": \"\",\n//                 \"file\": \"NativeMethodAccessorImpl.java\",\n//                 \"line\": 62\n//             }\n//         ]\n//     }\n// }\n\n//# sourceURL=webpack://coding-ars-client/./client/view/element/testResult.js?");

/***/ }),

/***/ "./client/view/element/wait.js":
/*!*************************************!*\
  !*** ./client/view/element/wait.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   waitViewElement: () => (/* binding */ waitViewElement)\n/* harmony export */ });\n/* harmony import */ var _loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loader */ \"./client/view/element/loader.js\");\n\n\nfunction waitViewElement() {\n    let waiter = document.createElement(\"div\");\n    waiter.classList.add(\"coding-ars-wait\");\n    waiter.appendChild((0,_loader__WEBPACK_IMPORTED_MODULE_0__.loaderViewElement)())\n\n    return waiter;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/element/wait.js?");

/***/ }),

/***/ "./client/view/key.js":
/*!****************************!*\
  !*** ./client/view/key.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyView: () => (/* binding */ keyView)\n/* harmony export */ });\n/* harmony import */ var _utils_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/message */ \"./client/utils/message.js\");\n/* harmony import */ var _language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../language */ \"./client/language.js\");\n\n\n\nfunction keyView(options) {\n    const translate = (0,_language__WEBPACK_IMPORTED_MODULE_1__.translator)(options.language);\n    let container = document.createElement('div');\n    container.classList.add('coding-ars-form');\n    \n    let input = document.createElement('input');\n    let button = document.createElement('button');\n\n    button.classList.add('coding-ars-primary');\n    button.textContent = translate(\"JOIN\");\n    input.value = window.defaultKey || \"\";\n\n    button.addEventListener('click', () => {\n        let key = input.value;\n        if(key) {\n            let keyEvent = new Event('coding-ars-key');\n            keyEvent.key = key;\n            container.dispatchEvent(keyEvent);\n        } else {\n            container.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_0__.errorMessage)(translate('NO_KEY_PROVIDED')));\n        }\n    })\n\n    container.appendChild(input);\n    container.appendChild(button);\n\n    return container;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/key.js?");

/***/ }),

/***/ "./client/view/message.js":
/*!********************************!*\
  !*** ./client/view/message.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   messageView: () => (/* binding */ messageView)\n/* harmony export */ });\nfunction messageView() {\n    let container = document.createElement('div');\n    container.classList.add('coding-ars-messages');\n    container.controller = {};\n    container.controller.show = (err, type) => {\n        let message = document.createElement('div');\n        let msg = document.createElement('div');\n        let close = document.createElement('button');\n        \n        message.classList.add('coding-ars-message');\n        msg.textContent = err;\n\n        if(type) {\n            message.classList.add(type);\n        } else {\n            message.classList.add('common');\n        }\n\n        window.setTimeout(() => message.classList.add('active'));\n        let remover = window.setTimeout(() => remove(), 10000);\n\n        let remove = () => {\n            if(remover) {\n                window.clearTimeout(remover);\n                remover = undefined;\n            }\n            message.classList.remove('active');\n            window.setTimeout(() => container.removeChild(message), 300);\n        }\n\n        close.addEventListener('click', remove);\n\n        message.appendChild(msg);\n        message.appendChild(close);\n        container.appendChild(message);\n    }\n    return container;\n}\n\n//# sourceURL=webpack://coding-ars-client/./client/view/message.js?");

/***/ }),

/***/ "./client/view/task.js":
/*!*****************************!*\
  !*** ./client/view/task.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   taskView: () => (/* binding */ taskView)\n/* harmony export */ });\n/* harmony import */ var _element_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element/editor */ \"./client/view/element/editor.js\");\n/* harmony import */ var _element_fileSelector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element/fileSelector */ \"./client/view/element/fileSelector.js\");\n/* harmony import */ var _element_wait__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element/wait */ \"./client/view/element/wait.js\");\n/* harmony import */ var _element_tab__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./element/tab */ \"./client/view/element/tab.js\");\n/* harmony import */ var _element_solution__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./element/solution */ \"./client/view/element/solution.js\");\n/* harmony import */ var _element_collapsible__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./element/collapsible */ \"./client/view/element/collapsible.js\");\n/* harmony import */ var _element_testResult__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./element/testResult */ \"./client/view/element/testResult.js\");\n/* harmony import */ var _element_buttonBar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./element/buttonBar */ \"./client/view/element/buttonBar.js\");\n/* harmony import */ var _utils_message__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/message */ \"./client/utils/message.js\");\n/* harmony import */ var _language__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../language */ \"./client/language.js\");\n/* harmony import */ var _element_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./element/modal */ \"./client/view/element/modal.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction taskView(options) {\n    const translate = (0,_language__WEBPACK_IMPORTED_MODULE_9__.translator)(options.language);\n\n    let container = document.createElement('div');\n    container.classList.add(\"coding-ars\");\n    container.classList.add('coding-ars-inactive');\n\n    let content = document.createElement(\"div\");\n    content.classList.add(\"coding-ars-content\");\n    container.appendChild(content);\n\n    let fileSelector = (0,_element_fileSelector__WEBPACK_IMPORTED_MODULE_1__.fileSelectorViewElement)();\n    content.appendChild(fileSelector);\n\n    let editorView = (0,_element_editor__WEBPACK_IMPORTED_MODULE_0__.editorViewElement)(options);\n    content.appendChild(editorView);\n    \n    let topButtonBar = (0,_element_buttonBar__WEBPACK_IMPORTED_MODULE_7__.buttonBarViewElement)();\n    let closeButton = topButtonBar.controller.addButton('close-icon');\n    closeButton.classList.add('coding-ars-close-button');\n    closeButton.addEventListener('click', () => container.dispatchEvent(new Event('coding-ars-show-collection')))\n    topButtonBar.classList.add('coding-ars-top-button-bar');\n    content.appendChild(topButtonBar);\n\n    let tabView = (0,_element_tab__WEBPACK_IMPORTED_MODULE_3__.tabViewElement)();\n    container.appendChild(tabView);\n\n    let descriptionTab = tabView.controller.addTab(translate('DESCRIPTION'));\n    let outputTab = tabView.controller.addTab(translate('RESULT'));\n    let sampleTab = tabView.controller.addTab(translate('SAMPLE_SOLUTION'));\n    let terminalTab = tabView.controller.addTab(translate('TERMINAL'));\n    let loadButton = tabView.controller.addButton('download-icon');\n    let resetButton = tabView.controller.addButton('trash-icon');\n    let runButton = tabView.controller.addButton('play-icon', 10000);\n    let testButton = tabView.controller.addButton('play-icon', 10000);\n\n    outputTab.classList.add('coding-ars-task-result');\n\n    let terminalContainer = document.createElement(\"div\");\n    terminalContainer.id = \"terminal-container\";\n    terminalContainer.style.height = \"100%\";\n    terminalTab.controller.replaceContent(terminalContainer);\n    terminalTab.controller.activate();\n\n    resetButton.controller.hide();\n    sampleTab.controller.hide();\n\n    // Virtual created element, has to be added to response tab when needed\n    let testResult = (0,_element_testResult__WEBPACK_IMPORTED_MODULE_6__.testResultViewElement)(options);\n\n    tabView.addEventListener('coding-ars-tab-view-active', () => container.classList.add('coding-ars-tab-view-active'), true);\n    tabView.addEventListener('coding-ars-tab-view-inactive', () => container.classList.remove('coding-ars-tab-view-active'), true);\n\n    let waiter = (0,_element_wait__WEBPACK_IMPORTED_MODULE_2__.waitViewElement)();\n    container.appendChild(waiter);\n\n\n    const showDescription = (title, text, useCodeReview, minScore, maxScore) => {\n        let content = document.createElement('div');\n        if(useCodeReview) {\n            text += `\\n\\n_${translate('MIN_SCORE_NOTE', '', {\"score\": minScore + \"/\" + maxScore})}_`;\n        }\n        content.innerHTML = (marked ? marked.parse(text) : text);\n        descriptionTab.controller.replaceContent(content);\n        descriptionTab.controller.activate();\n    }\n\n    let sampleSolutionLoaded;\n    const loadSampleSolution = () => {\n        if(sampleSolutionLoaded) {\n            return;\n        }\n        container.dispatchEvent(new Event('coding-ars-load-sample-solution'));\n    }\n\n    const showSampleSolution = (data) => {\n        sampleSolutionLoaded = true;\n        let sources = document.createElement('div');\n        let first = true;\n        sources.classList.add('sources');\n        (data.files || []).forEach(source => {\n            let elementContainer = (0,_element_collapsible__WEBPACK_IMPORTED_MODULE_5__.collapsibleViewElement)();\n            let pre = document.createElement('pre');\n            let code = document.createElement('code');\n            code.textContent = source.content;\n            if((source.path || \"\").endsWith('.py')) {\n                code.classList.add('python');\n            } else if((source.path || \"\").endsWith('.java')) {\n                code.classList.add('java');\n            }\n            pre.appendChild(code);\n            elementContainer.controller.title(source.path);\n            elementContainer.controller.appendToContent(pre);\n            sources.appendChild(elementContainer);\n            if(first) {\n                window.setTimeout(() => elementContainer.controller.open());\n                first = false;\n            }\n            hljs.highlightBlock(code);\n        });\n        sampleTab.controller.replaceContent(sources);\n    };\n\n    let testsOk, usedSamples;\n    sampleTab.addEventListener('coding-ars-tab-view-active', () => {\n        if(sampleSolutionLoaded) {\n            return;\n        }\n        if(testsOk || usedSamples) {\n            loadSampleSolution();\n        } else {\n            let warning = document.createElement(\"div\");\n            let warningText = document.createElement(\"p\");\n            let warningButtons = document.createElement(\"div\");\n            let warningButton = document.createElement(\"button\");\n            warningButtons.classList.add('coding-ars-buttons');\n            warningButton.classList.add('active');\n            warningText.textContent = translate('ASK_FOR_SHOW_SAMPLE_SOLUTION');\n            warningButton.textContent = translate('SHOW');\n            warningButtons.appendChild(warningButton);\n            warning.appendChild(warningText)\n            warning.appendChild(warningButtons)\n\n            warningButton.addEventListener('click', () => loadSampleSolution());\n            sampleTab.controller.replaceContent(warning);\n        }\n    });\n\n    let solutionTab;\n    let solutions;\n\n    const initSolutions = (focus) => {\n        if(solutionTab || options.disableSolutions) {\n            return;\n        }\n        solutionTab = tabView.controller.addTab(translate('SOLUTIONS'));\n        solutions = (0,_element_solution__WEBPACK_IMPORTED_MODULE_4__.solutionViewElement)();\n        solutionTab.controller.replaceContent(solutions);\n        solutionTab.addEventListener('coding-ars-tab-view-active', () => {\n            solutionTab.dispatchEvent(new Event('coding-ars-show-solutions'));\n        });\n        if(focus) {\n            solutionTab.controller.activate();\n        }\n    };\n\n    const showSolutions = (data) => {\n        solutions.controller.show(data);\n    };\n\n    let files = [];\n    let editorApi;\n    let controller = {};\n    let canTest;\n    let maxScore;\n    controller.show = (data) => {\n        // catch configurated content\n        const existing = (options.files || {})[data.name] || [];\n        // Handle file editable files\n        (data.files || []).forEach(el => {\n            let find = (data.sources || []).find(el2 => el.path == el2.path) || {};\n            let ex = existing.find(el2 => el.path == el2.path) || {};\n            let file = {\n                path: el.path,\n                original: el.content,\n                content: ex.content || find.content || el.content,\n                test: false,\n                active: false\n            }\n            files.push(file);\n            fileSelector.controller.add(el.path, (activate) =>\n                editorApi.switch(file.path).then(activate)\n            );\n        });\n        // Handle test files\n        (data.testFiles || []).forEach(el => {\n            let file = {\n                path: el.path,\n                content: el.content,\n                test: true,\n                active: false\n            }\n            files.push(file);\n            fileSelector.controller.add(el.path, (activate) =>\n                editorApi.switch(file.path).then(activate)\n            );\n        });\n        if (files.length > 0) {\n            files[0].active = true;\n            fileSelector.controller.activate(0);\n        }\n\n        resetButton.controller.show();\n        resetButton.addEventListener('click', () => {\n            if(window.confirm(translate('RESET_CURRENT_SOLUTION'))) {\n                editorApi.reset();\n            }\n        })\n\n        container.classList.add(\"files-active\");\n\n        // Show description\n        maxScore = data.maxScore || 10;\n        showDescription(data.title, data.description, data.useCodeReview, data.minScore || 0, maxScore); \n\n        canTest = !!data.canTest;\n        if(data.canTest) {\n            // if we can test, we don't need to run\n            runButton.controller.hide();\n        } else {\n            // we can't test? ok - hide test\n            testButton.controller.hide();\n            if(data.canRun) {\n                // nothing to do\n            } else {\n                // we can't test? ok - hide test\n                runButton.controller.hide();\n                controller.warn(\"No test or run for task\");\n            }\n        }\n\n        // Show result if already tested\n        if(data.testsOk) {\n            showResultMessage({message: translate('ALREADY_TESTED')});\n            initSolutions();\n            testsOk = data.testsOk;\n        }\n\n        if(data.allowSampleSolution && !options.disableSample) {\n            sampleTab.controller.show();\n        }\n\n        if(data.usedSamples) {\n            usedSamples = data.usedSamples;\n        }\n\n        // Start Editor\n        controller.activateEditor().then(() => {\n            console.log(\"Editor activated\")\n        });\n    };\n\n    const checkOrRecreateEditor = () => {\n        return new Promise((resolve, reject) => {\n            if(editorView.controller.initiated()) {\n                resolve();\n            } else {\n                editorView.controller.init().then(editorApiRef => {\n                    editorApi = editorApiRef;\n                    resolve();\n                })\n            }\n        });\n    }\n\n    controller.activateEditor = () => {\n        return new Promise((resolve, reject) => {\n            container.monacoModelStarting = window.setTimeout(_ => {\n                checkOrRecreateEditor().then(() => {\n                    container.monacoModelStarting = undefined;\n                    editorApi.create(files).then(() => {\n                        editorApi.switch(files.find(el => el.active).path).then(() => {\n                            container.classList.add('coding-ars-active');\n                            container.classList.remove('coding-ars-inactive');\n                            resolve();\n                        });\n                    })\n                })\n            }, 500);\n        })\n    };\n    controller.value = () => {\n        return new Promise((resolve, reject) => {\n            editorApi.value().then(response => {\n                (response.contents || []).forEach(el => {\n                    let file = files.find(el2 => el.path == el2.path);\n                    if(file) {\n                        file.content = el.content;\n                    }\n                });\n                resolve(\n                    files\n                        .filter(el => !el.test)\n                        .map(el => ({content: el.content, filename: el.path}))\n                )\n            })\n        });\n    }\n    controller.disposeEditor = () => {\n        return new Promise((resolve, reject) => {\n            if (container.monacoModelStarting) {\n                window.clearTimeout(container.monacoModelStarting);\n            }\n            editorApi.value().then(response => {\n                (response.contents || []).forEach(el => {\n                    let file = files.find(el2 => el.path == el2.path);\n                    if(file) {\n                        file.content = el.content;\n                    }\n                });\n\n                editorApi.dispose();\n                resolve();\n            })\n            container.monacoModelStarting = undefined;\n            container.classList.remove('coding-ars-active');\n            container.classList.add('coding-ars-inactive');\n        })\n    };\n\n    let outputCollapsibles = [];\n    const createOutputCollapsible = (title) => {\n        const coll = (0,_element_collapsible__WEBPACK_IMPORTED_MODULE_5__.collapsibleViewElement)();\n        coll.controller.title(title);\n        outputTab.controller.appendContent(coll);\n        outputCollapsibles.push(coll);\n        return coll;\n    };\n\n    const clearOutputCollapsibles = () => {\n        outputCollapsibles.forEach(el => el.remove());\n        outputCollapsibles = [];\n    };\n\n    const closeAllOutputCollapsibles = () => {\n        outputCollapsibles.forEach(el => el.controller.close());\n    };\n\n    const openOutputCollapsible = (col) => {\n        closeAllOutputCollapsibles();\n        col.controller.open();\n    };\n\n    const showResultMessage = (result) => {\n        clearOutputCollapsibles();\n        const consoleContainer = createOutputCollapsible(translate('CONSOLE'));\n\n        const consoleBox = document.createElement('div');\n        consoleBox.classList.add('coding-ars-info-content-wrapper');\n        consoleContainer.controller.appendToContent(consoleBox);\n        \n        const pre = document.createElement('pre');\n        consoleBox.appendChild(pre);\n        // Result message is mostly in message, if not print result as whole\n        pre.textContent = result.message || result;\n\n        // Show output tab\n        outputTab.controller.activate();\n\n        // If result is not a string\n        if(!(typeof result === 'string')) {\n            // Check if we have test results\n            result.testResults = result.testResults || [];\n            if(result.successfulTests) {\n                result.testResults = result.testResults.concat(result.successfulTests);\n            }\n            if(result.failedTests) {\n                result.testResults = result.testResults.concat(result.failedTests);\n            }\n            (result.expected || []).forEach(ex => {\n                const found = result.testResults.find(tr => tr.message == ex.message && tr.type == ex.type);\n                if(!found) {\n                    result.testResults.push({\n                        type: ex.type,\n                        message: ex.message,\n                        missing: true,\n                        failed: true,\n                        expected: ex.expected\n                    });\n                }\n            });\n            if(result.stdout) {\n                pre.textContent += \"\\n\\n\" + result.stdout;\n            }\n            if(result.testResults && result.testResults.length) {\n                const testContainer = createOutputCollapsible(translate('TESTS'));\n\n                const testBox = document.createElement('div');\n                testBox.classList.add('coding-ars-info-content-wrapper');\n                testContainer.controller.appendToContent(testBox);\n                testBox.appendChild(testResult);\n                \n                testResult.controller.replaceResults(result.testResults);\n                if(result.testsOk) {\n                    container.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_8__.successMessage)(translate('SUCCESS_MSG_TESTS')));\n                    testsOk = true;\n                    initSolutions();\n                    testContainer.controller.good();\n                    consoleContainer.controller.good();\n                    \n                } else {\n                    container.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_8__.errorMessage)(translate('FAILED_MSG_TESTS')));\n                    testContainer.controller.bad();\n                    consoleContainer.controller.bad();\n                }\n                openOutputCollapsible(testContainer);\n            } else {\n                if(result.compileResults && result.compileResults.length) {\n                    container.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_8__.errorMessage)(translate('COMPILE_ERROR_MSG')));\n                    consoleContainer.controller.bad();\n                } else if(result.message.indexOf(\"Error in\") >= 0) {\n                    consoleContainer.controller.bad();\n                } else {\n                    consoleContainer.controller.good();\n                }\n                openOutputCollapsible(consoleContainer);\n            }\n        } else {\n            openOutputCollapsible(consoleContainer);\n        }\n    }\n\n    controller.handleResult = (result, good) => {\n        showResultMessage(result);\n        runButton.controller.stopWait();\n        testButton.controller.stopWait();\n        runButton.controller.enable();\n        testButton.controller.enable();\n\n        terminalTab.controller.activate();\n\n        if((!canTest && good)) {\n            container.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_8__.successMessage)(translate('SUCCESS_MSG_RUN')));\n            testsOk = true;\n            initSolutions();\n        }\n    }\n\n    controller.showLatestCodeReview = (messages, score, minScore) => {\n        // Message array roles as assistant / user combined with content\n        // Server hides internel messages, so we can just show them\n        const reviewContainer = createOutputCollapsible(translate('CODE_REVIEW'));\n        const reviewBox = document.createElement('div');\n        reviewBox.classList.add('coding-ars-info-content-wrapper');\n        reviewContainer.controller.appendToContent(reviewBox);\n\n        let first = true;\n        let noCodeReview = false;\n        messages.forEach(el => {\n            if(!first) {\n                let hr = document.createElement('hr');\n                reviewBox.appendChild(hr);\n            }\n            let resultTextContainer = document.createElement('div');\n            resultTextContainer.classList.add(el.role === \"user\" ? 'coding-ars-code-review-question' : 'coding-ars-code-review-message');\n            reviewBox.appendChild(resultTextContainer);\n            resultTextContainer.innerHTML = (el.role === \"user\" ? \"<strong>You:</strong> \" + el.content : (marked ? marked.parse(el.content) : el.content));\n            first = false;\n\n            if(el.role === \"user\") {\n                if(el.content.toLowerCase().indexOf(\"no-code-review\") >= 0) {\n                    noCodeReview = true;\n                }\n            }\n        });\n\n        // Add markers and restore state\n        if(first) {\n            reviewContainer.controller.neutral();\n            tabView.controller.setState(translate(\"SUBMITTED_SOLUTION_MISSING_CODE_REVIEW\"), tabView.controller.STATE_NEUTRAL);\n            let resultTextContainer = document.createElement('div');\n            resultTextContainer.classList.add('coding-ars-code-review-message');\n            resultTextContainer.textContent = translate('PLEASE_RUN_CODE_AGAIN');\n            reviewBox.appendChild(resultTextContainer);\n        } else if(noCodeReview) {\n            reviewContainer.controller.neutral();\n            tabView.controller.setState(translate(\"SUBMITTED_SOLUTION_WITH_NO_CODE_REVIEW\"), tabView.controller.STATE_NEUTRAL);\n        } else if(score && score.ratio >= (minScore || 0)) {\n            reviewContainer.controller.good();\n            tabView.controller.setState(translate(\"SUBMITTED_SOLUTION_SUCCESSFUL\"), tabView.controller.STATE_SUCCESS);\n        } else {\n            reviewContainer.controller.bad();\n            tabView.controller.setState(translate(\"SUBMITTED_SOLUTION_WITH_BAD_SCORE\", \"\", {\"score\": (minScore * maxScore) + \"/\" + (maxScore)}), tabView.controller.STATE_FAILED);\n        }\n    };\n\n    const modal = (0,_element_modal__WEBPACK_IMPORTED_MODULE_10__.modalViewElement)();\n    container.appendChild(modal);\n\n    controller.startCodeReview = (success, startReview, startHelp, noCodeReview, badCodeReview) => {\n        // Update state\n        tabView.controller.hideState();\n        if(success) {\n            tabView.controller.setState(translate(\"NEW_SOLUTION_SUBMITTED\"), tabView.controller.STATE_NEUTRAL);\n        }\n        const reviewContainer = createOutputCollapsible(success ? translate('CODE_REVIEW') : translate('CODE_HELP'));\n\n        const reviewBox = document.createElement('div');\n        reviewBox.classList.add('coding-ars-info-content-wrapper');\n        reviewContainer.controller.appendToContent(reviewBox);\n\n        const loadingIndicator = document.createElement('div');\n        loadingIndicator.classList.add('coding-ars-chat-loading');\n        loadingIndicator.innerHTML = '<div class=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>';\n\n        // Present Button for \"Show Help\" or \"Start Review\"\n        let buttonContainer = document.createElement('div');\n        buttonContainer.classList.add('coding-ars-code-review-buttons');\n        let buttonNote = document.createElement('div');\n        buttonNote.textContent = success ? translate('CODE_REVIEW_NOTE') : translate('CODE_HELP_NOTE');\n        buttonNote.classList.add('coding-ars-code-review-note');\n        let helpInput = document.createElement('input');\n        helpInput.placeholder = translate('CODE_HELP_PLACEHOLDER');\n        let startHelpButton = document.createElement('button');\n        startHelpButton.textContent = translate('START_HELP');\n        let startReviewButton = document.createElement('button');\n        startReviewButton.textContent = translate('START_CODE_REVIEW');\n        let additionallButtons = document.createElement('div');\n        additionallButtons.classList.add('coding-ars-code-review-additional-buttons');\n        let iDontWantToUseCodeReview = document.createElement('a');\n        iDontWantToUseCodeReview.textContent = translate('I_DONT_WANT_TO_USE_CODE_REVIEW');\n        iDontWantToUseCodeReview.addEventListener('click', () => {\n            modal.controller.open({\n                title: translate('I_DONT_WANT_TO_USE_CODE_REVIEW'),\n                content: translate('I_DONT_WANT_TO_USE_CODE_REVIEW_TEXT'),\n                buttons: [\n                    {\n                        text: translate('ABORT'),\n                        className: 'coding-ars-button-secondary',\n                        onClick: (_, controller) => {\n                            controller.close();\n                        }\n                    },\n                    {\n                        text: translate('CONFIRM'),\n                        className: 'coding-ars-button-success',\n                        onClick: (_, controller) => {\n                            if(noCodeReview) {\n                                noCodeReview();\n                            }\n                            controller.close();\n                            buttonContainer.remove();\n                            buttonNote.remove();\n                            additionallButtons.remove();\n                            resultTextContainer.innerHTML = \"<strong>You:</strong> No-Code-Review\";\n                            reviewContainer.controller.neutral();\n                            tabView.controller.setState(translate(\"SUBMITTED_SOLUTION_WITH_NO_CODE_REVIEW\"), tabView.controller.STATE_NEUTRAL);\n                        }\n                    }\n                ],\n                onOpen: () => {\n                    \n                }\n            });\n        });\n        let terms = document.createElement('a');\n        terms.textContent = translate('CODE_REVIEW_TERMS');\n        terms.addEventListener('click', () => {\n            modal.controller.open({\n                title: translate('CODE_REVIEW_TERMS'),\n                content: marked ? marked.parse(translate('CODE_REVIEW_TERMS_TEXT')) : translate('CODE_REVIEW_TERMS_TEXT'),\n                onOpen: () => {\n                    \n                }\n            });\n        });\n        additionallButtons.appendChild(terms);\n        let thisIsABadReview = document.createElement('a');\n        thisIsABadReview.textContent = translate('THIS_IS_A_BAD_REVIEW');\n        additionallButtons.appendChild(thisIsABadReview);\n        thisIsABadReview.style.display = 'none';\n        thisIsABadReview.addEventListener('click', () => {\n            const content = document.createElement('div');\n            content.innerHTML = `<p>${translate('THIS_IS_A_BAD_REVIEW_TEXT')}</p><p><input type=\"text\" placeholder=\"${translate('THIS_IS_A_BAD_REVIEW_PLACEHOLDER')}\"></p>`;\n            const input = content.querySelector(\"input\");\n            modal.controller.open({\n                title: translate('THIS_IS_A_BAD_REVIEW'),\n                content: content,\n                buttons: [\n                    {\n                        text: translate('ABORT'),\n                        className: 'coding-ars-button-secondary',\n                        onClick: (_, controller) => {\n                            controller.close();\n                        }\n                    },\n                    {\n                        text: translate('CONFIRM'),\n                        className: 'coding-ars-button-success',\n                        onClick: (_, controller) => {\n                            if(badCodeReview) {\n                                badCodeReview(input.value || \"no-reason-provided\");\n                            }\n                            controller.close();\n                            buttonContainer.remove();\n                            buttonNote.remove();\n                            additionallButtons.remove();\n                            const box = reviewBox.querySelector('.coding-ars-code-review-response');\n                            if(box) {\n                                // Chat box is shown?\n                                box.remove();\n                            }\n                        }\n                    }\n                ],\n                onOpen: () => {\n                    \n                }\n            });\n        });\n        \n        if(success) {\n            additionallButtons.appendChild(iDontWantToUseCodeReview);\n            buttonContainer.appendChild(startReviewButton);\n        } else {\n            buttonContainer.appendChild(helpInput);\n            buttonContainer.appendChild(startHelpButton);\n        }\n        reviewBox.appendChild(buttonNote);\n        reviewBox.appendChild(buttonContainer);\n        reviewBox.appendChild(additionallButtons);\n        startReviewButton.addEventListener('click', () => {\n            buttonContainer.remove();\n            buttonNote.remove();\n            additionallButtons.remove();\n            reviewContainer.controller.appendToContent(loadingIndicator);\n            startReview();\n        });\n        const startHelpHandler = () => {\n            buttonContainer.remove();\n            buttonNote.remove();\n            additionallButtons.remove();\n            reviewContainer.controller.appendToContent(loadingIndicator);\n            startHelp(helpInput.value || translate('CODE_HELP_PLACEHOLDER'));\n        };\n        startHelpButton.addEventListener('click', () => startHelpHandler());\n\n        helpInput.addEventListener('keydown', (e) => {\n            if(e.key === \"Enter\") {\n                startHelpHandler();\n            }\n        });\n\n        let rollback = () => {\n            result = \"\";\n            reviewBox.innerHTML = \"\";\n            reviewBox.appendChild(buttonNote);\n            reviewBox.appendChild(buttonContainer);\n            reviewBox.appendChild(resultTextContainer);\n            reviewBox.appendChild(additionallButtons);\n        }\n\n        let resultTextContainer = document.createElement('div');\n        resultTextContainer.classList.add('coding-ars-code-review-message');\n\n        let shouldAutoScroll = true;\n        const tabsEntry = reviewBox.closest('.coding-ars-tabs-entry');\n        const userScrollHandler = (e) => {\n            const isAtBottom = Math.abs((tabsEntry.scrollHeight - tabsEntry.scrollTop - tabsEntry.clientHeight)) < 10;\n            if (!isAtBottom) {\n                shouldAutoScroll = false;\n            } else {\n                shouldAutoScroll = true;\n            }\n        };\n        const scrollInViewForText = () => {\n            if (shouldAutoScroll) {\n                requestAnimationFrame ? requestAnimationFrame(() => {\n                    reviewBox.closest('.coding-ars-tabs-entry').scrollTop = resultTextContainer.offsetTop;\n                }) : undefined;\n            }\n        };\n        tabsEntry.addEventListener('scroll', userScrollHandler);\n\n        reviewBox.appendChild(resultTextContainer);\n\n        if(success) {\n            openOutputCollapsible(reviewContainer);\n        }\n\n        let result = \"\";\n        let rollbackTriggered = false;\n        let first = true;\n        let finishes = 0;\n        let receivedScore;\n        let receivedMinScore;\n        let reviewCtrl = {\n            append: (content) => {\n                // remove loading indicator, if present\n                if(loadingIndicator.parentElement) {\n                    loadingIndicator.remove();\n                }\n\n                result += content;\n                resultTextContainer.innerHTML = marked ? marked.parse(result) : result;\n                reviewContainer.controller.fixContent();\n                scrollInViewForText();\n            },\n            rollbackWithError: (message) => {\n                // remove loading indicator, if present\n                if(loadingIndicator.parentElement) {\n                    loadingIndicator.remove();\n                }\n\n                container.dispatchEvent((0,_utils_message__WEBPACK_IMPORTED_MODULE_8__.errorMessage)(translate('CODE_REVIEW_FAILED')));\n                resultTextContainer.innerHTML = \"\";\n                rollback();\n                rollbackTriggered = true;\n            },\n            score: (score, min) => {\n                receivedScore = score;\n                receivedMinScore = min;\n            },\n            finishCodeReview: (furtherQuestionCallback) => {\n                // remove loading indicator, if present\n                if(loadingIndicator.parentElement) {\n                    loadingIndicator.remove();\n                }\n\n                if(rollbackTriggered) {\n                    rollbackTriggered = false;\n                    return;\n                }\n                if(first && success) {\n                    if(receivedScore && receivedScore.ratio >= (receivedMinScore || 0)) {\n                        reviewContainer.controller.good();\n                        tabView.controller.setState(translate(\"SUBMITTED_SOLUTION_SUCCESSFUL\"), tabView.controller.STATE_SUCCESS);\n                    } else {\n                        reviewContainer.controller.bad();\n                        tabView.controller.setState(translate(\"SUBMITTED_SOLUTION_WITH_BAD_SCORE\", \"\", {\"score\": (receivedMinScore * maxScore) + \"/\" + (maxScore)}), tabView.controller.STATE_FAILED);\n                    }\n                    if(iDontWantToUseCodeReview.parentElement) {\n                        iDontWantToUseCodeReview.remove();\n                    }\n                    first = false;\n                    thisIsABadReview.style.display = 'inline';\n                }\n                finishes ++;\n                if(furtherQuestionCallback && finishes <= 3) {\n                    let box = document.createElement('div');\n                    let input = document.createElement('input');\n                    input.placeholder = translate('CODE_ADDITIONAL_QUESTION_PLACEHOLDER');\n                    let submit = document.createElement('button');\n                    reviewBox.appendChild(box);\n                    reviewBox.appendChild(additionallButtons);\n                    box.appendChild(input);\n                    box.appendChild(submit);\n        \n                    submit.textContent = translate('SEND');\n                    box.classList.add('coding-ars-code-review-response');\n\n                    const handleAdditionalQuestion = () => {\n                        if(!input.value) {\n                            return;\n                        }\n                        shouldAutoScroll = true; // reset scroll behavior\n                        let hr1 = document.createElement('hr');\n                        let hr2 = document.createElement('hr');\n                        let questionContainer = document.createElement('div');\n                        questionContainer.classList.add('coding-ars-code-review-question');\n                        resultTextContainer = document.createElement('div');\n                        resultTextContainer.classList.add('coding-ars-code-review-message');\n                        reviewBox.appendChild(hr1);\n                        reviewBox.appendChild(questionContainer);\n                        reviewBox.appendChild(hr2);\n                        reviewBox.appendChild(resultTextContainer);\n                        questionContainer.innerHTML = \"<strong>You:</strong> \" + input.value;\n                        result = \"\";\n                        furtherQuestionCallback(input.value, reviewCtrl);\n                        rollback = () => {\n                            hr1.remove();\n                            hr2.remove();\n                            questionContainer.remove();\n                            resultTextContainer.remove();\n                            reviewBox.appendChild(box);\n                            reviewBox.appendChild(additionallButtons);\n                        };\n                        box.remove();\n                        additionallButtons.remove();\n                    };\n                    submit.addEventListener('click', () => handleAdditionalQuestion());\n                    input.addEventListener('keydown', (e) => {\n                        if(e.key === \"Enter\") {\n                            handleAdditionalQuestion();\n                        }\n                    });\n                } else if(furtherQuestionCallback && finishes > 3) {\n                    let hr = document.createElement('hr');\n                    let buttonNote = document.createElement('div');\n                    buttonNote.textContent = success ? translate('MAX_CODE_REVIEW_NOTE') : translate('MAX_CODE_REVIEW_NOTE');\n                    buttonNote.classList.add('coding-ars-code-review-note');\n                    reviewBox.appendChild(hr);\n                    reviewBox.appendChild(buttonNote);\n                }\n\n                reviewContainer.controller.fixContent();\n                scrollInViewForText();\n            }\n        };\n        return reviewCtrl;\n    };\n\n\n    controller.showSolutions = (data) => {\n        showSolutions(data);\n    }\n\n    controller.showSampleSolution = (data) => {\n        showSampleSolution(data);\n    }\n\n    controller.updateThumbs = (ref, thumbs, thumbed) => {\n        solutions.controller.updateThumbs(ref, thumbs, thumbed);\n    }\n\n    controller.initTerminalService = (url) => {\n        Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_xterm_addon-fit_lib_addon-fit_js-node_modules_xterm_xterm_lib_xterm_js\"), __webpack_require__.e(\"client_service_terminal_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ../service/terminal */ \"./client/service/terminal.js\")).then(({ TerminalService }) => {\n          controller.terminalService = new TerminalService(url, {\n            task: options.task,\n            target: terminalContainer,\n            language: options.language,\n          });\n        });\n      };\n\n    let runOrTest = (eventName) => {\n        controller.value().then(files => {\n            let ev = new Event(eventName);\n            ev.files = files;\n            container.dispatchEvent(ev);\n        })\n    }\n\n    const canExecute = () => {\n        if(runButton.controller.isWaiting() || !runButton.controller.isEnabled()) {\n            return false;\n        }\n        if(testButton.controller.isWaiting() || !testButton.controller.isEnabled()) {\n            return false;\n        }\n        return true;\n    }\n\n    runButton.addEventListener('click', _ => {\n        if(!canExecute()) {\n            return;\n        }\n        runButton.controller.wait();\n        testButton.controller.disable();\n        runOrTest('coding-ars-run')\n    });\n    \n    testButton.addEventListener('click', _ => {\n        if(!canExecute()) {\n            return;\n        }\n        runButton.controller.disable();\n        testButton.controller.wait();\n        runOrTest('coding-ars-test')\n    });\n    \n    loadButton.addEventListener('click', _ => {\n        container.dispatchEvent(new Event('coding-ars-download'))\n    })\n\n    controller.addToolbarButton = (icon) => topButtonBar.controller.addButton(icon);\n\n    container.controller = controller;\n\n    return container;\n};\n\n//# sourceURL=webpack://coding-ars-client/./client/view/task.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".client.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "coding-ars-client:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkcoding_ars_client"] = self["webpackChunkcoding_ars_client"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/client.js");
/******/ 	
/******/ })()
;